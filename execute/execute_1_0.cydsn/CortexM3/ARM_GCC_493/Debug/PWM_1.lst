ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM_1_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM_1_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM_1_Enable, %function
  24              	PWM_1_Enable:
  25              	.LFB2:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\PWM_1.c"
   1:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM_1.c **** * File Name: PWM_1.c
   3:.\Generated_Source\PSoC5/PWM_1.c **** * Version 3.30
   4:.\Generated_Source\PSoC5/PWM_1.c **** *
   5:.\Generated_Source\PSoC5/PWM_1.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM_1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM_1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM_1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM_1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC5/PWM_1.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC5/PWM_1.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM_1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM_1.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM_1.c **** *
  15:.\Generated_Source\PSoC5/PWM_1.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM_1.c **** *
  17:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC5/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC5/PWM_1.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM_1.c **** 
  24:.\Generated_Source\PSoC5/PWM_1.c **** #include "PWM_1.h"
  25:.\Generated_Source\PSoC5/PWM_1.c **** 
  26:.\Generated_Source\PSoC5/PWM_1.c **** /* Error message for removed <resource> through optimization */
  27:.\Generated_Source\PSoC5/PWM_1.c **** #ifdef PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC5/PWM_1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC5/PWM_1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 2


  32:.\Generated_Source\PSoC5/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  33:.\Generated_Source\PSoC5/PWM_1.c **** 
  34:.\Generated_Source\PSoC5/PWM_1.c **** 
  35:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Start
  37:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  38:.\Generated_Source\PSoC5/PWM_1.c **** *
  39:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
  40:.\Generated_Source\PSoC5/PWM_1.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC5/PWM_1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC5/PWM_1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC5/PWM_1.c **** *
  44:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  45:.\Generated_Source\PSoC5/PWM_1.c **** *  None
  46:.\Generated_Source\PSoC5/PWM_1.c **** *
  47:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
  48:.\Generated_Source\PSoC5/PWM_1.c **** *  None
  49:.\Generated_Source\PSoC5/PWM_1.c **** *
  50:.\Generated_Source\PSoC5/PWM_1.c **** * Global variables:
  51:.\Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC5/PWM_1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC5/PWM_1.c **** *
  54:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Start(void) 
  56:.\Generated_Source\PSoC5/PWM_1.c **** {
  57:.\Generated_Source\PSoC5/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC5/PWM_1.c ****     if(PWM_1_initVar == 0u)
  59:.\Generated_Source\PSoC5/PWM_1.c ****     {
  60:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_Init();
  61:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_initVar = 1u;
  62:.\Generated_Source\PSoC5/PWM_1.c ****     }
  63:.\Generated_Source\PSoC5/PWM_1.c ****     PWM_1_Enable();
  64:.\Generated_Source\PSoC5/PWM_1.c **** 
  65:.\Generated_Source\PSoC5/PWM_1.c **** }
  66:.\Generated_Source\PSoC5/PWM_1.c **** 
  67:.\Generated_Source\PSoC5/PWM_1.c **** 
  68:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Init
  70:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/PWM_1.c **** *
  72:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
  73:.\Generated_Source\PSoC5/PWM_1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC5/PWM_1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_Start().
  76:.\Generated_Source\PSoC5/PWM_1.c **** *
  77:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  78:.\Generated_Source\PSoC5/PWM_1.c **** *  None
  79:.\Generated_Source\PSoC5/PWM_1.c **** *
  80:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
  81:.\Generated_Source\PSoC5/PWM_1.c **** *  None
  82:.\Generated_Source\PSoC5/PWM_1.c **** *
  83:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Init(void) 
  85:.\Generated_Source\PSoC5/PWM_1.c **** {
  86:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
  87:.\Generated_Source\PSoC5/PWM_1.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction || PWM_1_UseControl) */
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 3


  89:.\Generated_Source\PSoC5/PWM_1.c **** 
  90:.\Generated_Source\PSoC5/PWM_1.c ****     #if(!PWM_1_UsingFixedFunction)
  91:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
  92:.\Generated_Source\PSoC5/PWM_1.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC5/PWM_1.c ****             uint8 PWM_1_interruptState;
  94:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
  95:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
  96:.\Generated_Source\PSoC5/PWM_1.c **** 
  97:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
  98:.\Generated_Source\PSoC5/PWM_1.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CFG0_MODE;
 100:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBand2_4)
 101:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= PWM_1_CFG0_DB;
 102:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBand2_4) */
 103:.\Generated_Source\PSoC5/PWM_1.c **** 
 104:.\Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL3 & ((uint8 )(~PWM_1_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL3 = ctrl | PWM_1_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC5/PWM_1.c **** 
 107:.\Generated_Source\PSoC5/PWM_1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_RT1_MASK));
 109:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNC;
 110:.\Generated_Source\PSoC5/PWM_1.c **** 
 111:.\Generated_Source\PSoC5/PWM_1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNCDSI_EN;
 114:.\Generated_Source\PSoC5/PWM_1.c **** 
 115:.\Generated_Source\PSoC5/PWM_1.c ****     #elif (PWM_1_UseControl)
 116:.\Generated_Source\PSoC5/PWM_1.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL & ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC5/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL = ctrl | PWM_1_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC5/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 122:.\Generated_Source\PSoC5/PWM_1.c **** 
 123:.\Generated_Source\PSoC5/PWM_1.c ****     #if (!PWM_1_UsingFixedFunction)
 124:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_Resolution == 8)
 125:.\Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC5/PWM_1.c ****         #else /* (PWM_1_Resolution == 16)*/
 128:.\Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP1 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_Resolution == 8) */
 132:.\Generated_Source\PSoC5/PWM_1.c **** 
 133:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_WriteCounter(PWM_1_INIT_PERIOD_VALUE);
 134:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 135:.\Generated_Source\PSoC5/PWM_1.c **** 
 136:.\Generated_Source\PSoC5/PWM_1.c ****     PWM_1_WritePeriod(PWM_1_INIT_PERIOD_VALUE);
 137:.\Generated_Source\PSoC5/PWM_1.c **** 
 138:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseOneCompareMode)
 139:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_INIT_COMPARE_VALUE1);
 140:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 141:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare1(PWM_1_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare2(PWM_1_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseOneCompareMode) */
 144:.\Generated_Source\PSoC5/PWM_1.c **** 
 145:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_KillModeMinTime)
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 4


 146:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteKillTime(PWM_1_MinimumKillTime);
 147:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_KillModeMinTime) */
 148:.\Generated_Source\PSoC5/PWM_1.c **** 
 149:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBandUsed)
 150:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteDeadTime(PWM_1_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBandUsed) */
 152:.\Generated_Source\PSoC5/PWM_1.c **** 
 153:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 154:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 156:.\Generated_Source\PSoC5/PWM_1.c **** 
 157:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 158:.\Generated_Source\PSoC5/PWM_1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC5/PWM_1.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL2 |= PWM_1_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC5/PWM_1.c ****     #else
 163:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
 164:.\Generated_Source\PSoC5/PWM_1.c **** 
 165:.\Generated_Source\PSoC5/PWM_1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC5/PWM_1.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC5/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_STATUS_AUX_CTRL |= PWM_1_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC5/PWM_1.c **** 
 171:.\Generated_Source\PSoC5/PWM_1.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC5/PWM_1.c ****             CyExitCriticalSection(PWM_1_interruptState);
 173:.\Generated_Source\PSoC5/PWM_1.c **** 
 174:.\Generated_Source\PSoC5/PWM_1.c ****             /* Clear the FIFO to enable the PWM_1_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC5/PWM_1.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_ClearFIFO();
 177:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 178:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 179:.\Generated_Source\PSoC5/PWM_1.c **** }
 180:.\Generated_Source\PSoC5/PWM_1.c **** 
 181:.\Generated_Source\PSoC5/PWM_1.c **** 
 182:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Enable
 184:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 185:.\Generated_Source\PSoC5/PWM_1.c **** *
 186:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
 187:.\Generated_Source\PSoC5/PWM_1.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC5/PWM_1.c **** *
 189:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 190:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 191:.\Generated_Source\PSoC5/PWM_1.c **** *
 192:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
 193:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 194:.\Generated_Source\PSoC5/PWM_1.c **** *
 195:.\Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 196:.\Generated_Source\PSoC5/PWM_1.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC5/PWM_1.c **** *
 198:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Enable(void) 
 200:.\Generated_Source\PSoC5/PWM_1.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:.\Generated_Source\PSoC5/PWM_1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE |= PWM_1_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 206:.\Generated_Source\PSoC5/PWM_1.c **** 
 207:.\Generated_Source\PSoC5/PWM_1.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 209:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CTRL_ENABLE;
  32              		.loc 1 209 0
  33 0000 024A     		ldr	r2, .L2
  34 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  35 0004 43F08003 		orr	r3, r3, #128
  36 0008 1370     		strb	r3, [r2]
  37 000a 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 000c 7C640040 		.word	1073767548
  42              		.cfi_endproc
  43              	.LFE2:
  44              		.size	PWM_1_Enable, .-PWM_1_Enable
  45              		.section	.text.PWM_1_Stop,"ax",%progbits
  46              		.align	2
  47              		.global	PWM_1_Stop
  48              		.thumb
  49              		.thumb_func
  50              		.type	PWM_1_Stop, %function
  51              	PWM_1_Stop:
  52              	.LFB3:
 210:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 211:.\Generated_Source\PSoC5/PWM_1.c **** }
 212:.\Generated_Source\PSoC5/PWM_1.c **** 
 213:.\Generated_Source\PSoC5/PWM_1.c **** 
 214:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Stop
 216:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 217:.\Generated_Source\PSoC5/PWM_1.c **** *
 218:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
 219:.\Generated_Source\PSoC5/PWM_1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC5/PWM_1.c **** *  interrupts.
 221:.\Generated_Source\PSoC5/PWM_1.c **** *
 222:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 223:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 224:.\Generated_Source\PSoC5/PWM_1.c **** *
 225:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
 226:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 227:.\Generated_Source\PSoC5/PWM_1.c **** *
 228:.\Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 229:.\Generated_Source\PSoC5/PWM_1.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC5/PWM_1.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC5/PWM_1.c **** *
 232:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Stop(void) 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 6


 234:.\Generated_Source\PSoC5/PWM_1.c **** {
  53              		.loc 1 234 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 235:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 236:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_ENABLE));
  58              		.loc 1 236 0
  59 0000 024A     		ldr	r2, .L5
  60 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  61 0004 03F07F03 		and	r3, r3, #127
  62 0008 1370     		strb	r3, [r2]
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 7C640040 		.word	1073767548
  68              		.cfi_endproc
  69              	.LFE3:
  70              		.size	PWM_1_Stop, .-PWM_1_Stop
  71              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
  72              		.align	2
  73              		.global	PWM_1_WriteCounter
  74              		.thumb
  75              		.thumb_func
  76              		.type	PWM_1_WriteCounter, %function
  77              	PWM_1_WriteCounter:
  78              	.LFB4:
 237:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM_1.c **** 
 239:.\Generated_Source\PSoC5/PWM_1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 241:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE &= ((uint8)(~PWM_1_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_1_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 244:.\Generated_Source\PSoC5/PWM_1.c **** }
 245:.\Generated_Source\PSoC5/PWM_1.c **** 
 246:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 247:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 248:.\Generated_Source\PSoC5/PWM_1.c **** 
 249:.\Generated_Source\PSoC5/PWM_1.c **** 
 250:.\Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode
 252:.\Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC5/PWM_1.c ****         *
 254:.\Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 255:.\Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC5/PWM_1.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC5/PWM_1.c ****         *
 258:.\Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 259:.\Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC5/PWM_1.c ****         *
 262:.\Generated_Source\PSoC5/PWM_1.c ****         * Return:
 263:.\Generated_Source\PSoC5/PWM_1.c ****         *  None
 264:.\Generated_Source\PSoC5/PWM_1.c ****         *
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 7


 265:.\Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC5/PWM_1.c ****         {
 268:.\Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 269:.\Generated_Source\PSoC5/PWM_1.c **** 
 270:.\Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SH
 272:.\Generated_Source\PSoC5/PWM_1.c ****                 #else
 273:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC5/PWM_1.c **** 
 276:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC5/PWM_1.c **** 
 279:.\Generated_Source\PSoC5/PWM_1.c ****             #elif (PWM_1_UseControl)
 280:.\Generated_Source\PSoC5/PWM_1.c **** 
 281:.\Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_S
 283:.\Generated_Source\PSoC5/PWM_1.c ****                                                 PWM_1_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC5/PWM_1.c ****                 #else
 285:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC5/PWM_1.c **** 
 288:.\Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_S
 290:.\Generated_Source\PSoC5/PWM_1.c ****                                                PWM_1_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC5/PWM_1.c ****                 #else
 292:.\Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC5/PWM_1.c **** 
 295:.\Generated_Source\PSoC5/PWM_1.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~(PWM_1_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC5/PWM_1.c ****                                             PWM_1_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC5/PWM_1.c **** 
 300:.\Generated_Source\PSoC5/PWM_1.c ****             #else
 301:.\Generated_Source\PSoC5/PWM_1.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 303:.\Generated_Source\PSoC5/PWM_1.c ****         }
 304:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 305:.\Generated_Source\PSoC5/PWM_1.c **** 
 306:.\Generated_Source\PSoC5/PWM_1.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC5/PWM_1.c **** 
 308:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 309:.\Generated_Source\PSoC5/PWM_1.c **** 
 310:.\Generated_Source\PSoC5/PWM_1.c **** 
 311:.\Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode1
 313:.\Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC5/PWM_1.c ****         *
 315:.\Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 316:.\Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC5/PWM_1.c ****         *
 318:.\Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 319:.\Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC5/PWM_1.c ****         *
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 8


 322:.\Generated_Source\PSoC5/PWM_1.c ****         * Return:
 323:.\Generated_Source\PSoC5/PWM_1.c ****         *  None
 324:.\Generated_Source\PSoC5/PWM_1.c ****         *
 325:.\Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC5/PWM_1.c ****         {
 328:.\Generated_Source\PSoC5/PWM_1.c ****             #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SHIFT)
 330:.\Generated_Source\PSoC5/PWM_1.c ****                                            PWM_1_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC5/PWM_1.c ****             #else
 332:.\Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC5/PWM_1.c **** 
 335:.\Generated_Source\PSoC5/PWM_1.c ****             #if (PWM_1_UseControl)
 336:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UseControl) */
 339:.\Generated_Source\PSoC5/PWM_1.c ****         }
 340:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 341:.\Generated_Source\PSoC5/PWM_1.c **** 
 342:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_CompareMode2SW)
 343:.\Generated_Source\PSoC5/PWM_1.c **** 
 344:.\Generated_Source\PSoC5/PWM_1.c **** 
 345:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetCompareMode2
 347:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC5/PWM_1.c ****     *
 349:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 350:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC5/PWM_1.c ****     *
 352:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 353:.\Generated_Source\PSoC5/PWM_1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC5/PWM_1.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC5/PWM_1.c ****     *
 356:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 357:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 358:.\Generated_Source\PSoC5/PWM_1.c ****     *
 359:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC5/PWM_1.c ****     {
 362:.\Generated_Source\PSoC5/PWM_1.c **** 
 363:.\Generated_Source\PSoC5/PWM_1.c ****         #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC5/PWM_1.c ****                                                  PWM_1_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 367:.\Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC5/PWM_1.c **** 
 370:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseControl)
 371:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseControl) */
 374:.\Generated_Source\PSoC5/PWM_1.c ****     }
 375:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /*PWM_1_CompareMode2SW */
 376:.\Generated_Source\PSoC5/PWM_1.c **** 
 377:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 9


 379:.\Generated_Source\PSoC5/PWM_1.c **** 
 380:.\Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 381:.\Generated_Source\PSoC5/PWM_1.c **** 
 382:.\Generated_Source\PSoC5/PWM_1.c **** 
 383:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCounter
 385:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC5/PWM_1.c ****     *
 387:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 388:.\Generated_Source\PSoC5/PWM_1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC5/PWM_1.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC5/PWM_1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC5/PWM_1.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC5/PWM_1.c ****     *
 393:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 394:.\Generated_Source\PSoC5/PWM_1.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC5/PWM_1.c ****     *
 396:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 397:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 398:.\Generated_Source\PSoC5/PWM_1.c ****     *
 399:.\Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
 400:.\Generated_Source\PSoC5/PWM_1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC5/PWM_1.c ****     *
 402:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCounter(uint16 counter) \
 404:.\Generated_Source\PSoC5/PWM_1.c ****                                        
 405:.\Generated_Source\PSoC5/PWM_1.c ****     {
  79              		.loc 1 405 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
 406:.\Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_COUNTER_LSB_PTR, counter);
  85              		.loc 1 406 0
  86 0000 014B     		ldr	r3, .L8
  87 0002 1880     		strh	r0, [r3]	@ movhi
  88 0004 7047     		bx	lr
  89              	.L9:
  90 0006 00BF     		.align	2
  91              	.L8:
  92 0008 106A0040 		.word	1073768976
  93              		.cfi_endproc
  94              	.LFE4:
  95              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
  96              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
  97              		.align	2
  98              		.global	PWM_1_ReadCounter
  99              		.thumb
 100              		.thumb_func
 101              		.type	PWM_1_ReadCounter, %function
 102              	PWM_1_ReadCounter:
 103              	.LFB5:
 407:.\Generated_Source\PSoC5/PWM_1.c ****     }
 408:.\Generated_Source\PSoC5/PWM_1.c **** 
 409:.\Generated_Source\PSoC5/PWM_1.c **** 
 410:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 10


 411:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCounter
 412:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC5/PWM_1.c ****     *
 414:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 415:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC5/PWM_1.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC5/PWM_1.c ****     *
 418:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 420:.\Generated_Source\PSoC5/PWM_1.c ****     *
 421:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 422:.\Generated_Source\PSoC5/PWM_1.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC5/PWM_1.c ****     *
 424:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCounter(void) 
 426:.\Generated_Source\PSoC5/PWM_1.c ****     {
 104              		.loc 1 426 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 427:.\Generated_Source\PSoC5/PWM_1.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC5/PWM_1.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC5/PWM_1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC5/PWM_1.c ****           (void)CY_GET_REG8(PWM_1_COUNTERCAP_LSB_PTR_8BIT);
 109              		.loc 1 430 0
 110 0000 024B     		ldr	r3, .L11
 111 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:.\Generated_Source\PSoC5/PWM_1.c **** 
 432:.\Generated_Source\PSoC5/PWM_1.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_CAPTURE_LSB_PTR));
 112              		.loc 1 433 0
 113 0004 024B     		ldr	r3, .L11+4
 114 0006 1888     		ldrh	r0, [r3]
 434:.\Generated_Source\PSoC5/PWM_1.c ****     }
 115              		.loc 1 434 0
 116 0008 80B2     		uxth	r0, r0
 117 000a 7047     		bx	lr
 118              	.L12:
 119              		.align	2
 120              	.L11:
 121 000c 18650040 		.word	1073767704
 122 0010 B06A0040 		.word	1073769136
 123              		.cfi_endproc
 124              	.LFE5:
 125              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 126              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 127              		.align	2
 128              		.global	PWM_1_WritePeriod
 129              		.thumb
 130              		.thumb_func
 131              		.type	PWM_1_WritePeriod, %function
 132              	PWM_1_WritePeriod:
 133              	.LFB7:
 435:.\Generated_Source\PSoC5/PWM_1.c **** 
 436:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus)
 437:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 11


 438:.\Generated_Source\PSoC5/PWM_1.c **** 
 439:.\Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_ClearFIFO
 441:.\Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC5/PWM_1.c ****         *
 443:.\Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 444:.\Generated_Source\PSoC5/PWM_1.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC5/PWM_1.c ****         *
 446:.\Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 447:.\Generated_Source\PSoC5/PWM_1.c ****         *  None
 448:.\Generated_Source\PSoC5/PWM_1.c ****         *
 449:.\Generated_Source\PSoC5/PWM_1.c ****         * Return:
 450:.\Generated_Source\PSoC5/PWM_1.c ****         *  None
 451:.\Generated_Source\PSoC5/PWM_1.c ****         *
 452:.\Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_ClearFIFO(void) 
 454:.\Generated_Source\PSoC5/PWM_1.c ****         {
 455:.\Generated_Source\PSoC5/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC5/PWM_1.c ****             {
 457:.\Generated_Source\PSoC5/PWM_1.c ****                 (void)PWM_1_ReadCapture();
 458:.\Generated_Source\PSoC5/PWM_1.c ****             }
 459:.\Generated_Source\PSoC5/PWM_1.c ****         }
 460:.\Generated_Source\PSoC5/PWM_1.c **** 
 461:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_UseStatus */
 462:.\Generated_Source\PSoC5/PWM_1.c **** 
 463:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* !PWM_1_UsingFixedFunction */
 464:.\Generated_Source\PSoC5/PWM_1.c **** 
 465:.\Generated_Source\PSoC5/PWM_1.c **** 
 466:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 468:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 469:.\Generated_Source\PSoC5/PWM_1.c **** *
 470:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
 471:.\Generated_Source\PSoC5/PWM_1.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC5/PWM_1.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC5/PWM_1.c **** *
 474:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 475:.\Generated_Source\PSoC5/PWM_1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC5/PWM_1.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC5/PWM_1.c **** *
 478:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
 479:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 480:.\Generated_Source\PSoC5/PWM_1.c **** *
 481:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC5/PWM_1.c **** void PWM_1_WritePeriod(uint16 period) 
 483:.\Generated_Source\PSoC5/PWM_1.c **** {
 134              		.loc 1 483 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL1:
 484:.\Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 485:.\Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC5/PWM_1.c ****     #else
 487:.\Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, period);
 140              		.loc 1 487 0
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 12


 141 0000 014B     		ldr	r3, .L14
 142 0002 1880     		strh	r0, [r3]	@ movhi
 143 0004 7047     		bx	lr
 144              	.L15:
 145 0006 00BF     		.align	2
 146              	.L14:
 147 0008 906A0040 		.word	1073769104
 148              		.cfi_endproc
 149              	.LFE7:
 150              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 151              		.section	.text.PWM_1_WriteCompare1,"ax",%progbits
 152              		.align	2
 153              		.global	PWM_1_WriteCompare1
 154              		.thumb
 155              		.thumb_func
 156              		.type	PWM_1_WriteCompare1, %function
 157              	PWM_1_WriteCompare1:
 158              	.LFB8:
 488:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 489:.\Generated_Source\PSoC5/PWM_1.c **** }
 490:.\Generated_Source\PSoC5/PWM_1.c **** 
 491:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 492:.\Generated_Source\PSoC5/PWM_1.c **** 
 493:.\Generated_Source\PSoC5/PWM_1.c **** 
 494:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare
 496:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC5/PWM_1.c ****     *
 498:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 499:.\Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC5/PWM_1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC5/PWM_1.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC5/PWM_1.c ****     *
 505:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 506:.\Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC5/PWM_1.c ****     *
 508:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 509:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 510:.\Generated_Source\PSoC5/PWM_1.c ****     *
 511:.\Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
 512:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC5/PWM_1.c ****     *
 515:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare(uint16 compare) \
 517:.\Generated_Source\PSoC5/PWM_1.c ****                                        
 518:.\Generated_Source\PSoC5/PWM_1.c ****     {
 519:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 520:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 522:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, compare);
 523:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 524:.\Generated_Source\PSoC5/PWM_1.c **** 
 525:.\Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_PWMMode == PWM_1__B_PWM__DITHER)
 526:.\Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 13


 527:.\Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC5/PWM_1.c ****             #else
 529:.\Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 531:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_PWMMode == PWM_1__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC5/PWM_1.c ****     }
 533:.\Generated_Source\PSoC5/PWM_1.c **** 
 534:.\Generated_Source\PSoC5/PWM_1.c **** 
 535:.\Generated_Source\PSoC5/PWM_1.c **** #else
 536:.\Generated_Source\PSoC5/PWM_1.c **** 
 537:.\Generated_Source\PSoC5/PWM_1.c **** 
 538:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare1
 540:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC5/PWM_1.c ****     *
 542:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 543:.\Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC5/PWM_1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC5/PWM_1.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC5/PWM_1.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC5/PWM_1.c ****     *
 548:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 549:.\Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC5/PWM_1.c ****     *
 551:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 552:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 553:.\Generated_Source\PSoC5/PWM_1.c ****     *
 554:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare1(uint16 compare) \
 556:.\Generated_Source\PSoC5/PWM_1.c ****                                         
 557:.\Generated_Source\PSoC5/PWM_1.c ****     {
 159              		.loc 1 557 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.LVL2:
 558:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 559:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 561:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, compare);
 165              		.loc 1 561 0
 166 0000 014B     		ldr	r3, .L17
 167 0002 1880     		strh	r0, [r3]	@ movhi
 168 0004 7047     		bx	lr
 169              	.L18:
 170 0006 00BF     		.align	2
 171              	.L17:
 172 0008 506A0040 		.word	1073769040
 173              		.cfi_endproc
 174              	.LFE8:
 175              		.size	PWM_1_WriteCompare1, .-PWM_1_WriteCompare1
 176              		.section	.text.PWM_1_WriteCompare2,"ax",%progbits
 177              		.align	2
 178              		.global	PWM_1_WriteCompare2
 179              		.thumb
 180              		.thumb_func
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 14


 181              		.type	PWM_1_WriteCompare2, %function
 182              	PWM_1_WriteCompare2:
 183              	.LFB9:
 562:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 563:.\Generated_Source\PSoC5/PWM_1.c ****     }
 564:.\Generated_Source\PSoC5/PWM_1.c **** 
 565:.\Generated_Source\PSoC5/PWM_1.c **** 
 566:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare2
 568:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC5/PWM_1.c ****     *
 570:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 571:.\Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC5/PWM_1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC5/PWM_1.c ****     *  mode.
 576:.\Generated_Source\PSoC5/PWM_1.c ****     *
 577:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 578:.\Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC5/PWM_1.c ****     *
 580:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 581:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 582:.\Generated_Source\PSoC5/PWM_1.c ****     *
 583:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare2(uint16 compare) \
 585:.\Generated_Source\PSoC5/PWM_1.c ****                                         
 586:.\Generated_Source\PSoC5/PWM_1.c ****     {
 184              		.loc 1 586 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL3:
 587:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 588:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 590:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 190              		.loc 1 590 0
 191 0000 014B     		ldr	r3, .L20
 192 0002 1880     		strh	r0, [r3]	@ movhi
 193 0004 7047     		bx	lr
 194              	.L21:
 195 0006 00BF     		.align	2
 196              	.L20:
 197 0008 706A0040 		.word	1073769072
 198              		.cfi_endproc
 199              	.LFE9:
 200              		.size	PWM_1_WriteCompare2, .-PWM_1_WriteCompare2
 201              		.section	.text.PWM_1_WriteDeadTime,"ax",%progbits
 202              		.align	2
 203              		.global	PWM_1_WriteDeadTime
 204              		.thumb
 205              		.thumb_func
 206              		.type	PWM_1_WriteDeadTime, %function
 207              	PWM_1_WriteDeadTime:
 208              	.LFB10:
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 15


 591:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 592:.\Generated_Source\PSoC5/PWM_1.c ****     }
 593:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC5/PWM_1.c **** 
 595:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_DeadBandUsed)
 596:.\Generated_Source\PSoC5/PWM_1.c **** 
 597:.\Generated_Source\PSoC5/PWM_1.c **** 
 598:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteDeadTime
 600:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC5/PWM_1.c ****     *
 602:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 603:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC5/PWM_1.c ****     *
 605:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 606:.\Generated_Source\PSoC5/PWM_1.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC5/PWM_1.c ****     *
 608:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 609:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 610:.\Generated_Source\PSoC5/PWM_1.c ****     *
 611:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC5/PWM_1.c ****     {
 209              		.loc 1 613 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL4:
 614:.\Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 616:.\Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_DEADBAND_COUNT_PTR, deadtime);
 215              		.loc 1 616 0
 216 0000 014B     		ldr	r3, .L23
 217 0002 1870     		strb	r0, [r3]
 218 0004 7047     		bx	lr
 219              	.L24:
 220 0006 00BF     		.align	2
 221              	.L23:
 222 0008 29640040 		.word	1073767465
 223              		.cfi_endproc
 224              	.LFE10:
 225              		.size	PWM_1_WriteDeadTime, .-PWM_1_WriteDeadTime
 226              		.section	.text.PWM_1_ReadDeadTime,"ax",%progbits
 227              		.align	2
 228              		.global	PWM_1_ReadDeadTime
 229              		.thumb
 230              		.thumb_func
 231              		.type	PWM_1_ReadDeadTime, %function
 232              	PWM_1_ReadDeadTime:
 233              	.LFB11:
 617:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 618:.\Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC5/PWM_1.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_DEADBAND_COUNT &= ((uint8)(~PWM_1_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC5/PWM_1.c **** 
 622:.\Generated_Source\PSoC5/PWM_1.c ****             /* Set new dead time */
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 16


 623:.\Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_1_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC5/PWM_1.c ****                                                     PWM_1_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC5/PWM_1.c ****             #else
 627:.\Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= deadtime & PWM_1_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC5/PWM_1.c **** 
 630:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 631:.\Generated_Source\PSoC5/PWM_1.c ****     }
 632:.\Generated_Source\PSoC5/PWM_1.c **** 
 633:.\Generated_Source\PSoC5/PWM_1.c **** 
 634:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadDeadTime
 636:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC5/PWM_1.c ****     *
 638:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 639:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC5/PWM_1.c ****     *
 641:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 642:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 643:.\Generated_Source\PSoC5/PWM_1.c ****     *
 644:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 645:.\Generated_Source\PSoC5/PWM_1.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC5/PWM_1.c ****     *
 647:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC5/PWM_1.c ****     {
 234              		.loc 1 649 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 650:.\Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 652:.\Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG8(PWM_1_DEADBAND_COUNT_PTR));
 239              		.loc 1 652 0
 240 0000 014B     		ldr	r3, .L26
 241 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 653:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 654:.\Generated_Source\PSoC5/PWM_1.c **** 
 655:.\Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC5/PWM_1.c ****                 return ((uint8)(((uint8)(PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC5/PWM_1.c ****                                                                            PWM_1_DEADBAND_COUNT_SHI
 659:.\Generated_Source\PSoC5/PWM_1.c ****             #else
 660:.\Generated_Source\PSoC5/PWM_1.c ****                 return (PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 663:.\Generated_Source\PSoC5/PWM_1.c ****     }
 242              		.loc 1 663 0
 243 0004 7047     		bx	lr
 244              	.L27:
 245 0006 00BF     		.align	2
 246              	.L26:
 247 0008 29640040 		.word	1073767465
 248              		.cfi_endproc
 249              	.LFE11:
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 17


 250              		.size	PWM_1_ReadDeadTime, .-PWM_1_ReadDeadTime
 251              		.section	.text.PWM_1_SetInterruptMode,"ax",%progbits
 252              		.align	2
 253              		.global	PWM_1_SetInterruptMode
 254              		.thumb
 255              		.thumb_func
 256              		.type	PWM_1_SetInterruptMode, %function
 257              	PWM_1_SetInterruptMode:
 258              	.LFB12:
 664:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC5/PWM_1.c **** 
 666:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 667:.\Generated_Source\PSoC5/PWM_1.c **** 
 668:.\Generated_Source\PSoC5/PWM_1.c **** 
 669:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetInterruptMode
 671:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC5/PWM_1.c ****     *
 673:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 674:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC5/PWM_1.c ****     *  source status register.
 676:.\Generated_Source\PSoC5/PWM_1.c ****     *
 677:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 678:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC5/PWM_1.c ****     *
 680:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 681:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 682:.\Generated_Source\PSoC5/PWM_1.c ****     *
 683:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC5/PWM_1.c ****     {
 259              		.loc 1 685 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL5:
 686:.\Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_STATUS_MASK_PTR, interruptMode);
 265              		.loc 1 686 0
 266 0000 014B     		ldr	r3, .L29
 267 0002 1870     		strb	r0, [r3]
 268 0004 7047     		bx	lr
 269              	.L30:
 270 0006 00BF     		.align	2
 271              	.L29:
 272 0008 89640040 		.word	1073767561
 273              		.cfi_endproc
 274              	.LFE12:
 275              		.size	PWM_1_SetInterruptMode, .-PWM_1_SetInterruptMode
 276              		.section	.text.PWM_1_ReadStatusRegister,"ax",%progbits
 277              		.align	2
 278              		.global	PWM_1_ReadStatusRegister
 279              		.thumb
 280              		.thumb_func
 281              		.type	PWM_1_ReadStatusRegister, %function
 282              	PWM_1_ReadStatusRegister:
 283              	.LFB13:
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 18


 687:.\Generated_Source\PSoC5/PWM_1.c ****     }
 688:.\Generated_Source\PSoC5/PWM_1.c **** 
 689:.\Generated_Source\PSoC5/PWM_1.c **** 
 690:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadStatusRegister
 692:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC5/PWM_1.c ****     *
 694:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 695:.\Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC5/PWM_1.c ****     *
 697:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 698:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 699:.\Generated_Source\PSoC5/PWM_1.c ****     *
 700:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 701:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC5/PWM_1.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC5/PWM_1.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC5/PWM_1.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC5/PWM_1.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC5/PWM_1.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC5/PWM_1.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC5/PWM_1.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC5/PWM_1.c ****     *
 710:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC5/PWM_1.c ****     {
 284              		.loc 1 712 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 713:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_STATUS_PTR));
 289              		.loc 1 713 0
 290 0000 014B     		ldr	r3, .L32
 291 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:.\Generated_Source\PSoC5/PWM_1.c ****     }
 292              		.loc 1 714 0
 293 0004 7047     		bx	lr
 294              	.L33:
 295 0006 00BF     		.align	2
 296              	.L32:
 297 0008 69640040 		.word	1073767529
 298              		.cfi_endproc
 299              	.LFE13:
 300              		.size	PWM_1_ReadStatusRegister, .-PWM_1_ReadStatusRegister
 301              		.section	.text.PWM_1_ReadControlRegister,"ax",%progbits
 302              		.align	2
 303              		.global	PWM_1_ReadControlRegister
 304              		.thumb
 305              		.thumb_func
 306              		.type	PWM_1_ReadControlRegister, %function
 307              	PWM_1_ReadControlRegister:
 308              	.LFB14:
 715:.\Generated_Source\PSoC5/PWM_1.c **** 
 716:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 717:.\Generated_Source\PSoC5/PWM_1.c **** 
 718:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 19


 719:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseControl)
 720:.\Generated_Source\PSoC5/PWM_1.c **** 
 721:.\Generated_Source\PSoC5/PWM_1.c **** 
 722:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadControlRegister
 724:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC5/PWM_1.c ****     *
 726:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 727:.\Generated_Source\PSoC5/PWM_1.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC5/PWM_1.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC5/PWM_1.c ****     *
 730:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 731:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 732:.\Generated_Source\PSoC5/PWM_1.c ****     *
 733:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 734:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC5/PWM_1.c ****     *
 736:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC5/PWM_1.c ****     {
 309              		.loc 1 738 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 739:.\Generated_Source\PSoC5/PWM_1.c ****         uint8 result;
 740:.\Generated_Source\PSoC5/PWM_1.c **** 
 741:.\Generated_Source\PSoC5/PWM_1.c ****         result = CY_GET_REG8(PWM_1_CONTROL_PTR);
 314              		.loc 1 741 0
 315 0000 014B     		ldr	r3, .L35
 316 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 317              	.LVL6:
 742:.\Generated_Source\PSoC5/PWM_1.c ****         return (result);
 743:.\Generated_Source\PSoC5/PWM_1.c ****     }
 318              		.loc 1 743 0
 319 0004 7047     		bx	lr
 320              	.L36:
 321 0006 00BF     		.align	2
 322              	.L35:
 323 0008 7C640040 		.word	1073767548
 324              		.cfi_endproc
 325              	.LFE14:
 326              		.size	PWM_1_ReadControlRegister, .-PWM_1_ReadControlRegister
 327              		.section	.text.PWM_1_WriteControlRegister,"ax",%progbits
 328              		.align	2
 329              		.global	PWM_1_WriteControlRegister
 330              		.thumb
 331              		.thumb_func
 332              		.type	PWM_1_WriteControlRegister, %function
 333              	PWM_1_WriteControlRegister:
 334              	.LFB15:
 744:.\Generated_Source\PSoC5/PWM_1.c **** 
 745:.\Generated_Source\PSoC5/PWM_1.c **** 
 746:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteControlRegister
 748:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC5/PWM_1.c ****     *
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 20


 750:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 751:.\Generated_Source\PSoC5/PWM_1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC5/PWM_1.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC5/PWM_1.c ****     *
 754:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 755:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC5/PWM_1.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC5/PWM_1.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC5/PWM_1.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC5/PWM_1.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC5/PWM_1.c ****     *
 761:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 762:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 763:.\Generated_Source\PSoC5/PWM_1.c ****     *
 764:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC5/PWM_1.c ****     {
 335              		.loc 1 766 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL7:
 767:.\Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_CONTROL_PTR, control);
 341              		.loc 1 767 0
 342 0000 014B     		ldr	r3, .L38
 343 0002 1870     		strb	r0, [r3]
 344 0004 7047     		bx	lr
 345              	.L39:
 346 0006 00BF     		.align	2
 347              	.L38:
 348 0008 7C640040 		.word	1073767548
 349              		.cfi_endproc
 350              	.LFE15:
 351              		.size	PWM_1_WriteControlRegister, .-PWM_1_WriteControlRegister
 352              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 353              		.align	2
 354              		.global	PWM_1_ReadCapture
 355              		.thumb
 356              		.thumb_func
 357              		.type	PWM_1_ReadCapture, %function
 358              	PWM_1_ReadCapture:
 359              	.LFB16:
 768:.\Generated_Source\PSoC5/PWM_1.c ****     }
 769:.\Generated_Source\PSoC5/PWM_1.c **** 
 770:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseControl) */
 771:.\Generated_Source\PSoC5/PWM_1.c **** 
 772:.\Generated_Source\PSoC5/PWM_1.c **** 
 773:.\Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 774:.\Generated_Source\PSoC5/PWM_1.c **** 
 775:.\Generated_Source\PSoC5/PWM_1.c **** 
 776:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCapture
 778:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC5/PWM_1.c ****     *
 780:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 781:.\Generated_Source\PSoC5/PWM_1.c ****     *  Reads the capture value from the capture FIFO.
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 21


 782:.\Generated_Source\PSoC5/PWM_1.c ****     *
 783:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 784:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 785:.\Generated_Source\PSoC5/PWM_1.c ****     *
 786:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 787:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC5/PWM_1.c ****     *
 789:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCapture(void) 
 791:.\Generated_Source\PSoC5/PWM_1.c ****     {
 360              		.loc 1 791 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 792:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_CAPTURE_LSB_PTR));
 365              		.loc 1 792 0
 366 0000 014B     		ldr	r3, .L41
 367 0002 1888     		ldrh	r0, [r3]
 793:.\Generated_Source\PSoC5/PWM_1.c ****     }
 368              		.loc 1 793 0
 369 0004 80B2     		uxth	r0, r0
 370 0006 7047     		bx	lr
 371              	.L42:
 372              		.align	2
 373              	.L41:
 374 0008 B06A0040 		.word	1073769136
 375              		.cfi_endproc
 376              	.LFE16:
 377              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 378              		.section	.text.PWM_1_ClearFIFO,"ax",%progbits
 379              		.align	2
 380              		.global	PWM_1_ClearFIFO
 381              		.thumb
 382              		.thumb_func
 383              		.type	PWM_1_ClearFIFO, %function
 384              	PWM_1_ClearFIFO:
 385              	.LFB6:
 454:.\Generated_Source\PSoC5/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 386              		.loc 1 454 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390 0000 08B5     		push	{r3, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 3, -8
 393              		.cfi_offset 14, -4
 455:.\Generated_Source\PSoC5/PWM_1.c ****             {
 394              		.loc 1 455 0
 395 0002 01E0     		b	.L44
 396              	.L45:
 457:.\Generated_Source\PSoC5/PWM_1.c ****             }
 397              		.loc 1 457 0
 398 0004 FFF7FEFF 		bl	PWM_1_ReadCapture
 399              	.LVL8:
 400              	.L44:
 455:.\Generated_Source\PSoC5/PWM_1.c ****             {
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 22


 401              		.loc 1 455 0
 402 0008 FFF7FEFF 		bl	PWM_1_ReadStatusRegister
 403              	.LVL9:
 404 000c 10F0100F 		tst	r0, #16
 405 0010 F8D1     		bne	.L45
 459:.\Generated_Source\PSoC5/PWM_1.c **** 
 406              		.loc 1 459 0
 407 0012 08BD     		pop	{r3, pc}
 408              		.cfi_endproc
 409              	.LFE6:
 410              		.size	PWM_1_ClearFIFO, .-PWM_1_ClearFIFO
 411              		.section	.text.PWM_1_Init,"ax",%progbits
 412              		.align	2
 413              		.global	PWM_1_Init
 414              		.thumb
 415              		.thumb_func
 416              		.type	PWM_1_Init, %function
 417              	PWM_1_Init:
 418              	.LFB1:
  85:.\Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
 419              		.loc 1 85 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 08B5     		push	{r3, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 117:.\Generated_Source\PSoC5/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 427              		.loc 1 117 0
 428 0002 194A     		ldr	r2, .L49
 429 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 430 0006 03F0C003 		and	r3, r3, #192
 431              	.LVL10:
 119:.\Generated_Source\PSoC5/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 432              		.loc 1 119 0
 433 000a 43F00903 		orr	r3, r3, #9
 434              	.LVL11:
 435 000e 1370     		strb	r3, [r2]
 129:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP1 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 436              		.loc 1 129 0
 437 0010 02F58E72 		add	r2, r2, #284
 438 0014 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 439 0016 43F00103 		orr	r3, r3, #1
 440 001a 1370     		strb	r3, [r2]
 130:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_Resolution == 8) */
 441              		.loc 1 130 0
 442 001c 0132     		adds	r2, r2, #1
 443 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 444 0020 43F00103 		orr	r3, r3, #1
 445 0024 1370     		strb	r3, [r2]
 133:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 446              		.loc 1 133 0
 447 0026 4FF44870 		mov	r0, #800
 448 002a FFF7FEFF 		bl	PWM_1_WriteCounter
 449              	.LVL12:
 136:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 23


 450              		.loc 1 136 0
 451 002e 4FF44870 		mov	r0, #800
 452 0032 FFF7FEFF 		bl	PWM_1_WritePeriod
 453              	.LVL13:
 141:.\Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare2(PWM_1_INIT_COMPARE_VALUE2);
 454              		.loc 1 141 0
 455 0036 0A20     		movs	r0, #10
 456 0038 FFF7FEFF 		bl	PWM_1_WriteCompare1
 457              	.LVL14:
 142:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseOneCompareMode) */
 458              		.loc 1 142 0
 459 003c 0120     		movs	r0, #1
 460 003e FFF7FEFF 		bl	PWM_1_WriteCompare2
 461              	.LVL15:
 150:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBandUsed) */
 462              		.loc 1 150 0
 463 0042 2720     		movs	r0, #39
 464 0044 FFF7FEFF 		bl	PWM_1_WriteDeadTime
 465              	.LVL16:
 154:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 466              		.loc 1 154 0
 467 0048 0020     		movs	r0, #0
 468 004a FFF7FEFF 		bl	PWM_1_SetInterruptMode
 469              	.LVL17:
 167:.\Generated_Source\PSoC5/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 470              		.loc 1 167 0
 471 004e FFF7FEFF 		bl	CyEnterCriticalSection
 472              	.LVL18:
 169:.\Generated_Source\PSoC5/PWM_1.c **** 
 473              		.loc 1 169 0
 474 0052 064A     		ldr	r2, .L49+4
 475 0054 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 476 0056 43F01003 		orr	r3, r3, #16
 477 005a 1370     		strb	r3, [r2]
 172:.\Generated_Source\PSoC5/PWM_1.c **** 
 478              		.loc 1 172 0
 479 005c FFF7FEFF 		bl	CyExitCriticalSection
 480              	.LVL19:
 176:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 481              		.loc 1 176 0
 482 0060 FFF7FEFF 		bl	PWM_1_ClearFIFO
 483              	.LVL20:
 484 0064 08BD     		pop	{r3, pc}
 485              	.L50:
 486 0066 00BF     		.align	2
 487              	.L49:
 488 0068 7C640040 		.word	1073767548
 489 006c 99640040 		.word	1073767577
 490              		.cfi_endproc
 491              	.LFE1:
 492              		.size	PWM_1_Init, .-PWM_1_Init
 493              		.section	.text.PWM_1_Start,"ax",%progbits
 494              		.align	2
 495              		.global	PWM_1_Start
 496              		.thumb
 497              		.thumb_func
 498              		.type	PWM_1_Start, %function
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 24


 499              	PWM_1_Start:
 500              	.LFB0:
  56:.\Generated_Source\PSoC5/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
 501              		.loc 1 56 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 0000 08B5     		push	{r3, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 3, -8
 508              		.cfi_offset 14, -4
  58:.\Generated_Source\PSoC5/PWM_1.c ****     {
 509              		.loc 1 58 0
 510 0002 054B     		ldr	r3, .L54
 511 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 512 0006 23B9     		cbnz	r3, .L52
  60:.\Generated_Source\PSoC5/PWM_1.c ****         PWM_1_initVar = 1u;
 513              		.loc 1 60 0
 514 0008 FFF7FEFF 		bl	PWM_1_Init
 515              	.LVL21:
  61:.\Generated_Source\PSoC5/PWM_1.c ****     }
 516              		.loc 1 61 0
 517 000c 0122     		movs	r2, #1
 518 000e 024B     		ldr	r3, .L54
 519 0010 1A70     		strb	r2, [r3]
 520              	.L52:
  63:.\Generated_Source\PSoC5/PWM_1.c **** 
 521              		.loc 1 63 0
 522 0012 FFF7FEFF 		bl	PWM_1_Enable
 523              	.LVL22:
 524 0016 08BD     		pop	{r3, pc}
 525              	.L55:
 526              		.align	2
 527              	.L54:
 528 0018 00000000 		.word	.LANCHOR0
 529              		.cfi_endproc
 530              	.LFE0:
 531              		.size	PWM_1_Start, .-PWM_1_Start
 532              		.section	.text.PWM_1_ReadCompare1,"ax",%progbits
 533              		.align	2
 534              		.global	PWM_1_ReadCompare1
 535              		.thumb
 536              		.thumb_func
 537              		.type	PWM_1_ReadCompare1, %function
 538              	PWM_1_ReadCompare1:
 539              	.LFB17:
 794:.\Generated_Source\PSoC5/PWM_1.c **** 
 795:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* (!PWM_1_UsingFixedFunction) */
 796:.\Generated_Source\PSoC5/PWM_1.c **** 
 797:.\Generated_Source\PSoC5/PWM_1.c **** 
 798:.\Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 799:.\Generated_Source\PSoC5/PWM_1.c **** 
 800:.\Generated_Source\PSoC5/PWM_1.c **** 
 801:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare
 803:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC5/PWM_1.c ****     *
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 25


 805:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 806:.\Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC5/PWM_1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC5/PWM_1.c ****     *
 809:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 810:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 811:.\Generated_Source\PSoC5/PWM_1.c ****     *
 812:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 813:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC5/PWM_1.c ****     *
 815:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare(void) 
 817:.\Generated_Source\PSoC5/PWM_1.c ****     {
 818:.\Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 819:.\Generated_Source\PSoC5/PWM_1.c ****             return ((uint16)CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC5/PWM_1.c ****         #else
 821:.\Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 822:.\Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 823:.\Generated_Source\PSoC5/PWM_1.c ****     }
 824:.\Generated_Source\PSoC5/PWM_1.c **** 
 825:.\Generated_Source\PSoC5/PWM_1.c **** #else
 826:.\Generated_Source\PSoC5/PWM_1.c **** 
 827:.\Generated_Source\PSoC5/PWM_1.c **** 
 828:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare1
 830:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC5/PWM_1.c ****     *
 832:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 833:.\Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC5/PWM_1.c ****     *
 835:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 836:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 837:.\Generated_Source\PSoC5/PWM_1.c ****     *
 838:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 839:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC5/PWM_1.c ****     *
 841:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare1(void) 
 843:.\Generated_Source\PSoC5/PWM_1.c ****     {
 540              		.loc 1 843 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 844:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 545              		.loc 1 844 0
 546 0000 014B     		ldr	r3, .L57
 547 0002 1888     		ldrh	r0, [r3]
 845:.\Generated_Source\PSoC5/PWM_1.c ****     }
 548              		.loc 1 845 0
 549 0004 80B2     		uxth	r0, r0
 550 0006 7047     		bx	lr
 551              	.L58:
 552              		.align	2
 553              	.L57:
 554 0008 506A0040 		.word	1073769040
 555              		.cfi_endproc
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 26


 556              	.LFE17:
 557              		.size	PWM_1_ReadCompare1, .-PWM_1_ReadCompare1
 558              		.section	.text.PWM_1_ReadCompare2,"ax",%progbits
 559              		.align	2
 560              		.global	PWM_1_ReadCompare2
 561              		.thumb
 562              		.thumb_func
 563              		.type	PWM_1_ReadCompare2, %function
 564              	PWM_1_ReadCompare2:
 565              	.LFB18:
 846:.\Generated_Source\PSoC5/PWM_1.c **** 
 847:.\Generated_Source\PSoC5/PWM_1.c **** 
 848:.\Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare2
 850:.\Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC5/PWM_1.c ****     *
 852:.\Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 853:.\Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC5/PWM_1.c ****     *
 855:.\Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 856:.\Generated_Source\PSoC5/PWM_1.c ****     *  None
 857:.\Generated_Source\PSoC5/PWM_1.c ****     *
 858:.\Generated_Source\PSoC5/PWM_1.c ****     * Return:
 859:.\Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC5/PWM_1.c ****     *
 861:.\Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC5/PWM_1.c ****     uint16 PWM_1_ReadCompare2(void) 
 863:.\Generated_Source\PSoC5/PWM_1.c ****     {
 566              		.loc 1 863 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 864:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_COMPARE2_LSB_PTR));
 571              		.loc 1 864 0
 572 0000 014B     		ldr	r3, .L60
 573 0002 1888     		ldrh	r0, [r3]
 865:.\Generated_Source\PSoC5/PWM_1.c ****     }
 574              		.loc 1 865 0
 575 0004 80B2     		uxth	r0, r0
 576 0006 7047     		bx	lr
 577              	.L61:
 578              		.align	2
 579              	.L60:
 580 0008 706A0040 		.word	1073769072
 581              		.cfi_endproc
 582              	.LFE18:
 583              		.size	PWM_1_ReadCompare2, .-PWM_1_ReadCompare2
 584              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 585              		.align	2
 586              		.global	PWM_1_ReadPeriod
 587              		.thumb
 588              		.thumb_func
 589              		.type	PWM_1_ReadPeriod, %function
 590              	PWM_1_ReadPeriod:
 591              	.LFB19:
 866:.\Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 27


 867:.\Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseOneCompareMode) */
 868:.\Generated_Source\PSoC5/PWM_1.c **** 
 869:.\Generated_Source\PSoC5/PWM_1.c **** 
 870:.\Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 872:.\Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 873:.\Generated_Source\PSoC5/PWM_1.c **** *
 874:.\Generated_Source\PSoC5/PWM_1.c **** * Summary:
 875:.\Generated_Source\PSoC5/PWM_1.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC5/PWM_1.c **** *
 877:.\Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 878:.\Generated_Source\PSoC5/PWM_1.c **** *  None
 879:.\Generated_Source\PSoC5/PWM_1.c **** *
 880:.\Generated_Source\PSoC5/PWM_1.c **** * Return:
 881:.\Generated_Source\PSoC5/PWM_1.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC5/PWM_1.c **** *
 883:.\Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC5/PWM_1.c **** uint16 PWM_1_ReadPeriod(void) 
 885:.\Generated_Source\PSoC5/PWM_1.c **** {
 592              		.loc 1 885 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 886:.\Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 887:.\Generated_Source\PSoC5/PWM_1.c ****         return ((uint16)CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC5/PWM_1.c ****     #else
 889:.\Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 597              		.loc 1 889 0
 598 0000 014B     		ldr	r3, .L63
 599 0002 1888     		ldrh	r0, [r3]
 890:.\Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 891:.\Generated_Source\PSoC5/PWM_1.c **** }
 600              		.loc 1 891 0
 601 0004 80B2     		uxth	r0, r0
 602 0006 7047     		bx	lr
 603              	.L64:
 604              		.align	2
 605              	.L63:
 606 0008 906A0040 		.word	1073769104
 607              		.cfi_endproc
 608              	.LFE19:
 609              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 610              		.global	PWM_1_initVar
 611              		.bss
 612              		.set	.LANCHOR0,. + 0
 613              		.type	PWM_1_initVar, %object
 614              		.size	PWM_1_initVar, 1
 615              	PWM_1_initVar:
 616 0000 00       		.space	1
 617              		.text
 618              	.Letext0:
 619              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 620              		.file 3 ".\\Generated_Source\\PSoC5\\CyLib.h"
 621              		.section	.debug_info,"",%progbits
 622              	.Ldebug_info0:
 623 0000 E4030000 		.4byte	0x3e4
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 28


 624 0004 0400     		.2byte	0x4
 625 0006 00000000 		.4byte	.Ldebug_abbrev0
 626 000a 04       		.byte	0x4
 627 000b 01       		.uleb128 0x1
 628 000c 0D020000 		.4byte	.LASF45
 629 0010 01       		.byte	0x1
 630 0011 C5000000 		.4byte	.LASF46
 631 0015 13000000 		.4byte	.LASF47
 632 0019 00000000 		.4byte	.Ldebug_ranges0+0
 633 001d 00000000 		.4byte	0
 634 0021 00000000 		.4byte	.Ldebug_line0
 635 0025 02       		.uleb128 0x2
 636 0026 01       		.byte	0x1
 637 0027 06       		.byte	0x6
 638 0028 70030000 		.4byte	.LASF0
 639 002c 02       		.uleb128 0x2
 640 002d 01       		.byte	0x1
 641 002e 08       		.byte	0x8
 642 002f 41010000 		.4byte	.LASF1
 643 0033 02       		.uleb128 0x2
 644 0034 02       		.byte	0x2
 645 0035 05       		.byte	0x5
 646 0036 DF010000 		.4byte	.LASF2
 647 003a 02       		.uleb128 0x2
 648 003b 02       		.byte	0x2
 649 003c 07       		.byte	0x7
 650 003d B2000000 		.4byte	.LASF3
 651 0041 02       		.uleb128 0x2
 652 0042 04       		.byte	0x4
 653 0043 05       		.byte	0x5
 654 0044 62030000 		.4byte	.LASF4
 655 0048 02       		.uleb128 0x2
 656 0049 04       		.byte	0x4
 657 004a 07       		.byte	0x7
 658 004b 65010000 		.4byte	.LASF5
 659 004f 02       		.uleb128 0x2
 660 0050 08       		.byte	0x8
 661 0051 05       		.byte	0x5
 662 0052 EA020000 		.4byte	.LASF6
 663 0056 02       		.uleb128 0x2
 664 0057 08       		.byte	0x8
 665 0058 07       		.byte	0x7
 666 0059 2A010000 		.4byte	.LASF7
 667 005d 03       		.uleb128 0x3
 668 005e 04       		.byte	0x4
 669 005f 05       		.byte	0x5
 670 0060 696E7400 		.ascii	"int\000"
 671 0064 02       		.uleb128 0x2
 672 0065 04       		.byte	0x4
 673 0066 07       		.byte	0x7
 674 0067 B2020000 		.4byte	.LASF8
 675 006b 04       		.uleb128 0x4
 676 006c 77010000 		.4byte	.LASF9
 677 0070 02       		.byte	0x2
 678 0071 C2       		.byte	0xc2
 679 0072 2C000000 		.4byte	0x2c
 680 0076 04       		.uleb128 0x4
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 29


 681 0077 FB010000 		.4byte	.LASF10
 682 007b 02       		.byte	0x2
 683 007c C3       		.byte	0xc3
 684 007d 3A000000 		.4byte	0x3a
 685 0081 02       		.uleb128 0x2
 686 0082 04       		.byte	0x4
 687 0083 04       		.byte	0x4
 688 0084 7F000000 		.4byte	.LASF11
 689 0088 02       		.uleb128 0x2
 690 0089 08       		.byte	0x8
 691 008a 04       		.byte	0x4
 692 008b B5010000 		.4byte	.LASF12
 693 008f 02       		.uleb128 0x2
 694 0090 01       		.byte	0x1
 695 0091 08       		.byte	0x8
 696 0092 6B030000 		.4byte	.LASF13
 697 0096 05       		.uleb128 0x5
 698 0097 4F010000 		.4byte	.LASF14
 699 009b 02       		.byte	0x2
 700 009c 6C01     		.2byte	0x16c
 701 009e A2000000 		.4byte	0xa2
 702 00a2 06       		.uleb128 0x6
 703 00a3 6B000000 		.4byte	0x6b
 704 00a7 05       		.uleb128 0x5
 705 00a8 00000000 		.4byte	.LASF15
 706 00ac 02       		.byte	0x2
 707 00ad 6D01     		.2byte	0x16d
 708 00af B3000000 		.4byte	0xb3
 709 00b3 06       		.uleb128 0x6
 710 00b4 76000000 		.4byte	0x76
 711 00b8 02       		.uleb128 0x2
 712 00b9 04       		.byte	0x4
 713 00ba 07       		.byte	0x7
 714 00bb E1020000 		.4byte	.LASF16
 715 00bf 07       		.uleb128 0x7
 716 00c0 06000000 		.4byte	.LASF17
 717 00c4 01       		.byte	0x1
 718 00c5 C7       		.byte	0xc7
 719 00c6 00000000 		.4byte	.LFB2
 720 00ca 10000000 		.4byte	.LFE2-.LFB2
 721 00ce 01       		.uleb128 0x1
 722 00cf 9C       		.byte	0x9c
 723 00d0 07       		.uleb128 0x7
 724 00d1 57030000 		.4byte	.LASF18
 725 00d5 01       		.byte	0x1
 726 00d6 E9       		.byte	0xe9
 727 00d7 00000000 		.4byte	.LFB3
 728 00db 10000000 		.4byte	.LFE3-.LFB3
 729 00df 01       		.uleb128 0x1
 730 00e0 9C       		.byte	0x9c
 731 00e1 08       		.uleb128 0x8
 732 00e2 5C000000 		.4byte	.LASF19
 733 00e6 01       		.byte	0x1
 734 00e7 9301     		.2byte	0x193
 735 00e9 00000000 		.4byte	.LFB4
 736 00ed 0C000000 		.4byte	.LFE4-.LFB4
 737 00f1 01       		.uleb128 0x1
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 30


 738 00f2 9C       		.byte	0x9c
 739 00f3 06010000 		.4byte	0x106
 740 00f7 09       		.uleb128 0x9
 741 00f8 22010000 		.4byte	.LASF21
 742 00fc 01       		.byte	0x1
 743 00fd 9301     		.2byte	0x193
 744 00ff 76000000 		.4byte	0x76
 745 0103 01       		.uleb128 0x1
 746 0104 50       		.byte	0x50
 747 0105 00       		.byte	0
 748 0106 0A       		.uleb128 0xa
 749 0107 32030000 		.4byte	.LASF28
 750 010b 01       		.byte	0x1
 751 010c A901     		.2byte	0x1a9
 752 010e 76000000 		.4byte	0x76
 753 0112 00000000 		.4byte	.LFB5
 754 0116 14000000 		.4byte	.LFE5-.LFB5
 755 011a 01       		.uleb128 0x1
 756 011b 9C       		.byte	0x9c
 757 011c 08       		.uleb128 0x8
 758 011d 20030000 		.4byte	.LASF20
 759 0121 01       		.byte	0x1
 760 0122 E201     		.2byte	0x1e2
 761 0124 00000000 		.4byte	.LFB7
 762 0128 0C000000 		.4byte	.LFE7-.LFB7
 763 012c 01       		.uleb128 0x1
 764 012d 9C       		.byte	0x9c
 765 012e 41010000 		.4byte	0x141
 766 0132 09       		.uleb128 0x9
 767 0133 85000000 		.4byte	.LASF22
 768 0137 01       		.byte	0x1
 769 0138 E201     		.2byte	0x1e2
 770 013a 76000000 		.4byte	0x76
 771 013e 01       		.uleb128 0x1
 772 013f 50       		.byte	0x50
 773 0140 00       		.byte	0
 774 0141 08       		.uleb128 0x8
 775 0142 E6000000 		.4byte	.LASF23
 776 0146 01       		.byte	0x1
 777 0147 2B02     		.2byte	0x22b
 778 0149 00000000 		.4byte	.LFB8
 779 014d 0C000000 		.4byte	.LFE8-.LFB8
 780 0151 01       		.uleb128 0x1
 781 0152 9C       		.byte	0x9c
 782 0153 66010000 		.4byte	0x166
 783 0157 09       		.uleb128 0x9
 784 0158 7C030000 		.4byte	.LASF24
 785 015c 01       		.byte	0x1
 786 015d 2B02     		.2byte	0x22b
 787 015f 76000000 		.4byte	0x76
 788 0163 01       		.uleb128 0x1
 789 0164 50       		.byte	0x50
 790 0165 00       		.byte	0
 791 0166 08       		.uleb128 0x8
 792 0167 FA000000 		.4byte	.LASF25
 793 016b 01       		.byte	0x1
 794 016c 4802     		.2byte	0x248
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 31


 795 016e 00000000 		.4byte	.LFB9
 796 0172 0C000000 		.4byte	.LFE9-.LFB9
 797 0176 01       		.uleb128 0x1
 798 0177 9C       		.byte	0x9c
 799 0178 8B010000 		.4byte	0x18b
 800 017c 09       		.uleb128 0x9
 801 017d 7C030000 		.4byte	.LASF24
 802 0181 01       		.byte	0x1
 803 0182 4802     		.2byte	0x248
 804 0184 76000000 		.4byte	0x76
 805 0188 01       		.uleb128 0x1
 806 0189 50       		.byte	0x50
 807 018a 00       		.byte	0
 808 018b 08       		.uleb128 0x8
 809 018c 0E010000 		.4byte	.LASF26
 810 0190 01       		.byte	0x1
 811 0191 6402     		.2byte	0x264
 812 0193 00000000 		.4byte	.LFB10
 813 0197 0C000000 		.4byte	.LFE10-.LFB10
 814 019b 01       		.uleb128 0x1
 815 019c 9C       		.byte	0x9c
 816 019d B0010000 		.4byte	0x1b0
 817 01a1 09       		.uleb128 0x9
 818 01a2 84030000 		.4byte	.LASF27
 819 01a6 01       		.byte	0x1
 820 01a7 6402     		.2byte	0x264
 821 01a9 6B000000 		.4byte	0x6b
 822 01ad 01       		.uleb128 0x1
 823 01ae 50       		.byte	0x50
 824 01af 00       		.byte	0
 825 01b0 0A       		.uleb128 0xa
 826 01b1 44030000 		.4byte	.LASF29
 827 01b5 01       		.byte	0x1
 828 01b6 8802     		.2byte	0x288
 829 01b8 6B000000 		.4byte	0x6b
 830 01bc 00000000 		.4byte	.LFB11
 831 01c0 0C000000 		.4byte	.LFE11-.LFB11
 832 01c4 01       		.uleb128 0x1
 833 01c5 9C       		.byte	0x9c
 834 01c6 08       		.uleb128 0x8
 835 01c7 85010000 		.4byte	.LASF30
 836 01cb 01       		.byte	0x1
 837 01cc AC02     		.2byte	0x2ac
 838 01ce 00000000 		.4byte	.LFB12
 839 01d2 0C000000 		.4byte	.LFE12-.LFB12
 840 01d6 01       		.uleb128 0x1
 841 01d7 9C       		.byte	0x9c
 842 01d8 EB010000 		.4byte	0x1eb
 843 01dc 09       		.uleb128 0x9
 844 01dd 12030000 		.4byte	.LASF31
 845 01e1 01       		.byte	0x1
 846 01e2 AC02     		.2byte	0x2ac
 847 01e4 6B000000 		.4byte	0x6b
 848 01e8 01       		.uleb128 0x1
 849 01e9 50       		.byte	0x50
 850 01ea 00       		.byte	0
 851 01eb 0A       		.uleb128 0xa
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 32


 852 01ec 9C010000 		.4byte	.LASF32
 853 01f0 01       		.byte	0x1
 854 01f1 C702     		.2byte	0x2c7
 855 01f3 6B000000 		.4byte	0x6b
 856 01f7 00000000 		.4byte	.LFB13
 857 01fb 0C000000 		.4byte	.LFE13-.LFB13
 858 01ff 01       		.uleb128 0x1
 859 0200 9C       		.byte	0x9c
 860 0201 0B       		.uleb128 0xb
 861 0202 F8020000 		.4byte	.LASF48
 862 0206 01       		.byte	0x1
 863 0207 E102     		.2byte	0x2e1
 864 0209 6B000000 		.4byte	0x6b
 865 020d 00000000 		.4byte	.LFB14
 866 0211 0C000000 		.4byte	.LFE14-.LFB14
 867 0215 01       		.uleb128 0x1
 868 0216 9C       		.byte	0x9c
 869 0217 2A020000 		.4byte	0x22a
 870 021b 0C       		.uleb128 0xc
 871 021c D5020000 		.4byte	.LASF38
 872 0220 01       		.byte	0x1
 873 0221 E302     		.2byte	0x2e3
 874 0223 6B000000 		.4byte	0x6b
 875 0227 01       		.uleb128 0x1
 876 0228 50       		.byte	0x50
 877 0229 00       		.byte	0
 878 022a 08       		.uleb128 0x8
 879 022b 41000000 		.4byte	.LASF33
 880 022f 01       		.byte	0x1
 881 0230 FD02     		.2byte	0x2fd
 882 0232 00000000 		.4byte	.LFB15
 883 0236 0C000000 		.4byte	.LFE15-.LFB15
 884 023a 01       		.uleb128 0x1
 885 023b 9C       		.byte	0x9c
 886 023c 4F020000 		.4byte	0x24f
 887 0240 09       		.uleb128 0x9
 888 0241 7D010000 		.4byte	.LASF34
 889 0245 01       		.byte	0x1
 890 0246 FD02     		.2byte	0x2fd
 891 0248 6B000000 		.4byte	0x6b
 892 024c 01       		.uleb128 0x1
 893 024d 50       		.byte	0x50
 894 024e 00       		.byte	0
 895 024f 0A       		.uleb128 0xa
 896 0250 E9010000 		.4byte	.LASF35
 897 0254 01       		.byte	0x1
 898 0255 1603     		.2byte	0x316
 899 0257 76000000 		.4byte	0x76
 900 025b 00000000 		.4byte	.LFB16
 901 025f 0C000000 		.4byte	.LFE16-.LFB16
 902 0263 01       		.uleb128 0x1
 903 0264 9C       		.byte	0x9c
 904 0265 08       		.uleb128 0x8
 905 0266 6F000000 		.4byte	.LASF36
 906 026a 01       		.byte	0x1
 907 026b C501     		.2byte	0x1c5
 908 026d 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 33


 909 0271 14000000 		.4byte	.LFE6-.LFB6
 910 0275 01       		.uleb128 0x1
 911 0276 9C       		.byte	0x9c
 912 0277 8E020000 		.4byte	0x28e
 913 027b 0D       		.uleb128 0xd
 914 027c 08000000 		.4byte	.LVL8
 915 0280 4F020000 		.4byte	0x24f
 916 0284 0D       		.uleb128 0xd
 917 0285 0C000000 		.4byte	.LVL9
 918 0289 EB010000 		.4byte	0x1eb
 919 028d 00       		.byte	0
 920 028e 0E       		.uleb128 0xe
 921 028f 02020000 		.4byte	.LASF37
 922 0293 01       		.byte	0x1
 923 0294 54       		.byte	0x54
 924 0295 00000000 		.4byte	.LFB1
 925 0299 70000000 		.4byte	.LFE1-.LFB1
 926 029d 01       		.uleb128 0x1
 927 029e 9C       		.byte	0x9c
 928 029f 54030000 		.4byte	0x354
 929 02a3 0F       		.uleb128 0xf
 930 02a4 DC020000 		.4byte	.LASF39
 931 02a8 01       		.byte	0x1
 932 02a9 57       		.byte	0x57
 933 02aa 6B000000 		.4byte	0x6b
 934 02ae 00000000 		.4byte	.LLST0
 935 02b2 0F       		.uleb128 0xf
 936 02b3 BC010000 		.4byte	.LASF40
 937 02b7 01       		.byte	0x1
 938 02b8 5D       		.byte	0x5d
 939 02b9 6B000000 		.4byte	0x6b
 940 02bd 13000000 		.4byte	.LLST1
 941 02c1 10       		.uleb128 0x10
 942 02c2 2E000000 		.4byte	.LVL12
 943 02c6 E1000000 		.4byte	0xe1
 944 02ca D6020000 		.4byte	0x2d6
 945 02ce 11       		.uleb128 0x11
 946 02cf 01       		.uleb128 0x1
 947 02d0 50       		.byte	0x50
 948 02d1 03       		.uleb128 0x3
 949 02d2 0A       		.byte	0xa
 950 02d3 2003     		.2byte	0x320
 951 02d5 00       		.byte	0
 952 02d6 10       		.uleb128 0x10
 953 02d7 36000000 		.4byte	.LVL13
 954 02db 1C010000 		.4byte	0x11c
 955 02df EB020000 		.4byte	0x2eb
 956 02e3 11       		.uleb128 0x11
 957 02e4 01       		.uleb128 0x1
 958 02e5 50       		.byte	0x50
 959 02e6 03       		.uleb128 0x3
 960 02e7 0A       		.byte	0xa
 961 02e8 2003     		.2byte	0x320
 962 02ea 00       		.byte	0
 963 02eb 10       		.uleb128 0x10
 964 02ec 3C000000 		.4byte	.LVL14
 965 02f0 41010000 		.4byte	0x141
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 34


 966 02f4 FE020000 		.4byte	0x2fe
 967 02f8 11       		.uleb128 0x11
 968 02f9 01       		.uleb128 0x1
 969 02fa 50       		.byte	0x50
 970 02fb 01       		.uleb128 0x1
 971 02fc 3A       		.byte	0x3a
 972 02fd 00       		.byte	0
 973 02fe 10       		.uleb128 0x10
 974 02ff 42000000 		.4byte	.LVL15
 975 0303 66010000 		.4byte	0x166
 976 0307 11030000 		.4byte	0x311
 977 030b 11       		.uleb128 0x11
 978 030c 01       		.uleb128 0x1
 979 030d 50       		.byte	0x50
 980 030e 01       		.uleb128 0x1
 981 030f 31       		.byte	0x31
 982 0310 00       		.byte	0
 983 0311 10       		.uleb128 0x10
 984 0312 48000000 		.4byte	.LVL16
 985 0316 8B010000 		.4byte	0x18b
 986 031a 25030000 		.4byte	0x325
 987 031e 11       		.uleb128 0x11
 988 031f 01       		.uleb128 0x1
 989 0320 50       		.byte	0x50
 990 0321 02       		.uleb128 0x2
 991 0322 08       		.byte	0x8
 992 0323 27       		.byte	0x27
 993 0324 00       		.byte	0
 994 0325 10       		.uleb128 0x10
 995 0326 4E000000 		.4byte	.LVL17
 996 032a C6010000 		.4byte	0x1c6
 997 032e 38030000 		.4byte	0x338
 998 0332 11       		.uleb128 0x11
 999 0333 01       		.uleb128 0x1
 1000 0334 50       		.byte	0x50
 1001 0335 01       		.uleb128 0x1
 1002 0336 30       		.byte	0x30
 1003 0337 00       		.byte	0
 1004 0338 0D       		.uleb128 0xd
 1005 0339 52000000 		.4byte	.LVL18
 1006 033d CF030000 		.4byte	0x3cf
 1007 0341 0D       		.uleb128 0xd
 1008 0342 60000000 		.4byte	.LVL19
 1009 0346 DA030000 		.4byte	0x3da
 1010 034a 0D       		.uleb128 0xd
 1011 034b 64000000 		.4byte	.LVL20
 1012 034f 65020000 		.4byte	0x265
 1013 0353 00       		.byte	0
 1014 0354 0E       		.uleb128 0xe
 1015 0355 8D030000 		.4byte	.LASF41
 1016 0359 01       		.byte	0x1
 1017 035a 37       		.byte	0x37
 1018 035b 00000000 		.4byte	.LFB0
 1019 035f 1C000000 		.4byte	.LFE0-.LFB0
 1020 0363 01       		.uleb128 0x1
 1021 0364 9C       		.byte	0x9c
 1022 0365 7C030000 		.4byte	0x37c
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 35


 1023 0369 0D       		.uleb128 0xd
 1024 036a 0C000000 		.4byte	.LVL21
 1025 036e 8E020000 		.4byte	0x28e
 1026 0372 0D       		.uleb128 0xd
 1027 0373 16000000 		.4byte	.LVL22
 1028 0377 BF000000 		.4byte	0xbf
 1029 037b 00       		.byte	0
 1030 037c 0A       		.uleb128 0xa
 1031 037d 8C000000 		.4byte	.LASF42
 1032 0381 01       		.byte	0x1
 1033 0382 4A03     		.2byte	0x34a
 1034 0384 76000000 		.4byte	0x76
 1035 0388 00000000 		.4byte	.LFB17
 1036 038c 0C000000 		.4byte	.LFE17-.LFB17
 1037 0390 01       		.uleb128 0x1
 1038 0391 9C       		.byte	0x9c
 1039 0392 0A       		.uleb128 0xa
 1040 0393 9F000000 		.4byte	.LASF43
 1041 0397 01       		.byte	0x1
 1042 0398 5E03     		.2byte	0x35e
 1043 039a 76000000 		.4byte	0x76
 1044 039e 00000000 		.4byte	.LFB18
 1045 03a2 0C000000 		.4byte	.LFE18-.LFB18
 1046 03a6 01       		.uleb128 0x1
 1047 03a7 9C       		.byte	0x9c
 1048 03a8 0A       		.uleb128 0xa
 1049 03a9 54010000 		.4byte	.LASF44
 1050 03ad 01       		.byte	0x1
 1051 03ae 7403     		.2byte	0x374
 1052 03b0 76000000 		.4byte	0x76
 1053 03b4 00000000 		.4byte	.LFB19
 1054 03b8 0C000000 		.4byte	.LFE19-.LFB19
 1055 03bc 01       		.uleb128 0x1
 1056 03bd 9C       		.byte	0x9c
 1057 03be 12       		.uleb128 0x12
 1058 03bf D1010000 		.4byte	.LASF49
 1059 03c3 01       		.byte	0x1
 1060 03c4 20       		.byte	0x20
 1061 03c5 6B000000 		.4byte	0x6b
 1062 03c9 05       		.uleb128 0x5
 1063 03ca 03       		.byte	0x3
 1064 03cb 00000000 		.4byte	PWM_1_initVar
 1065 03cf 13       		.uleb128 0x13
 1066 03d0 9B020000 		.4byte	.LASF50
 1067 03d4 03       		.byte	0x3
 1068 03d5 7E       		.byte	0x7e
 1069 03d6 6B000000 		.4byte	0x6b
 1070 03da 14       		.uleb128 0x14
 1071 03db BF020000 		.4byte	.LASF51
 1072 03df 03       		.byte	0x3
 1073 03e0 7F       		.byte	0x7f
 1074 03e1 15       		.uleb128 0x15
 1075 03e2 6B000000 		.4byte	0x6b
 1076 03e6 00       		.byte	0
 1077 03e7 00       		.byte	0
 1078              		.section	.debug_abbrev,"",%progbits
 1079              	.Ldebug_abbrev0:
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 36


 1080 0000 01       		.uleb128 0x1
 1081 0001 11       		.uleb128 0x11
 1082 0002 01       		.byte	0x1
 1083 0003 25       		.uleb128 0x25
 1084 0004 0E       		.uleb128 0xe
 1085 0005 13       		.uleb128 0x13
 1086 0006 0B       		.uleb128 0xb
 1087 0007 03       		.uleb128 0x3
 1088 0008 0E       		.uleb128 0xe
 1089 0009 1B       		.uleb128 0x1b
 1090 000a 0E       		.uleb128 0xe
 1091 000b 55       		.uleb128 0x55
 1092 000c 17       		.uleb128 0x17
 1093 000d 11       		.uleb128 0x11
 1094 000e 01       		.uleb128 0x1
 1095 000f 10       		.uleb128 0x10
 1096 0010 17       		.uleb128 0x17
 1097 0011 00       		.byte	0
 1098 0012 00       		.byte	0
 1099 0013 02       		.uleb128 0x2
 1100 0014 24       		.uleb128 0x24
 1101 0015 00       		.byte	0
 1102 0016 0B       		.uleb128 0xb
 1103 0017 0B       		.uleb128 0xb
 1104 0018 3E       		.uleb128 0x3e
 1105 0019 0B       		.uleb128 0xb
 1106 001a 03       		.uleb128 0x3
 1107 001b 0E       		.uleb128 0xe
 1108 001c 00       		.byte	0
 1109 001d 00       		.byte	0
 1110 001e 03       		.uleb128 0x3
 1111 001f 24       		.uleb128 0x24
 1112 0020 00       		.byte	0
 1113 0021 0B       		.uleb128 0xb
 1114 0022 0B       		.uleb128 0xb
 1115 0023 3E       		.uleb128 0x3e
 1116 0024 0B       		.uleb128 0xb
 1117 0025 03       		.uleb128 0x3
 1118 0026 08       		.uleb128 0x8
 1119 0027 00       		.byte	0
 1120 0028 00       		.byte	0
 1121 0029 04       		.uleb128 0x4
 1122 002a 16       		.uleb128 0x16
 1123 002b 00       		.byte	0
 1124 002c 03       		.uleb128 0x3
 1125 002d 0E       		.uleb128 0xe
 1126 002e 3A       		.uleb128 0x3a
 1127 002f 0B       		.uleb128 0xb
 1128 0030 3B       		.uleb128 0x3b
 1129 0031 0B       		.uleb128 0xb
 1130 0032 49       		.uleb128 0x49
 1131 0033 13       		.uleb128 0x13
 1132 0034 00       		.byte	0
 1133 0035 00       		.byte	0
 1134 0036 05       		.uleb128 0x5
 1135 0037 16       		.uleb128 0x16
 1136 0038 00       		.byte	0
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 37


 1137 0039 03       		.uleb128 0x3
 1138 003a 0E       		.uleb128 0xe
 1139 003b 3A       		.uleb128 0x3a
 1140 003c 0B       		.uleb128 0xb
 1141 003d 3B       		.uleb128 0x3b
 1142 003e 05       		.uleb128 0x5
 1143 003f 49       		.uleb128 0x49
 1144 0040 13       		.uleb128 0x13
 1145 0041 00       		.byte	0
 1146 0042 00       		.byte	0
 1147 0043 06       		.uleb128 0x6
 1148 0044 35       		.uleb128 0x35
 1149 0045 00       		.byte	0
 1150 0046 49       		.uleb128 0x49
 1151 0047 13       		.uleb128 0x13
 1152 0048 00       		.byte	0
 1153 0049 00       		.byte	0
 1154 004a 07       		.uleb128 0x7
 1155 004b 2E       		.uleb128 0x2e
 1156 004c 00       		.byte	0
 1157 004d 3F       		.uleb128 0x3f
 1158 004e 19       		.uleb128 0x19
 1159 004f 03       		.uleb128 0x3
 1160 0050 0E       		.uleb128 0xe
 1161 0051 3A       		.uleb128 0x3a
 1162 0052 0B       		.uleb128 0xb
 1163 0053 3B       		.uleb128 0x3b
 1164 0054 0B       		.uleb128 0xb
 1165 0055 27       		.uleb128 0x27
 1166 0056 19       		.uleb128 0x19
 1167 0057 11       		.uleb128 0x11
 1168 0058 01       		.uleb128 0x1
 1169 0059 12       		.uleb128 0x12
 1170 005a 06       		.uleb128 0x6
 1171 005b 40       		.uleb128 0x40
 1172 005c 18       		.uleb128 0x18
 1173 005d 9742     		.uleb128 0x2117
 1174 005f 19       		.uleb128 0x19
 1175 0060 00       		.byte	0
 1176 0061 00       		.byte	0
 1177 0062 08       		.uleb128 0x8
 1178 0063 2E       		.uleb128 0x2e
 1179 0064 01       		.byte	0x1
 1180 0065 3F       		.uleb128 0x3f
 1181 0066 19       		.uleb128 0x19
 1182 0067 03       		.uleb128 0x3
 1183 0068 0E       		.uleb128 0xe
 1184 0069 3A       		.uleb128 0x3a
 1185 006a 0B       		.uleb128 0xb
 1186 006b 3B       		.uleb128 0x3b
 1187 006c 05       		.uleb128 0x5
 1188 006d 27       		.uleb128 0x27
 1189 006e 19       		.uleb128 0x19
 1190 006f 11       		.uleb128 0x11
 1191 0070 01       		.uleb128 0x1
 1192 0071 12       		.uleb128 0x12
 1193 0072 06       		.uleb128 0x6
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 38


 1194 0073 40       		.uleb128 0x40
 1195 0074 18       		.uleb128 0x18
 1196 0075 9742     		.uleb128 0x2117
 1197 0077 19       		.uleb128 0x19
 1198 0078 01       		.uleb128 0x1
 1199 0079 13       		.uleb128 0x13
 1200 007a 00       		.byte	0
 1201 007b 00       		.byte	0
 1202 007c 09       		.uleb128 0x9
 1203 007d 05       		.uleb128 0x5
 1204 007e 00       		.byte	0
 1205 007f 03       		.uleb128 0x3
 1206 0080 0E       		.uleb128 0xe
 1207 0081 3A       		.uleb128 0x3a
 1208 0082 0B       		.uleb128 0xb
 1209 0083 3B       		.uleb128 0x3b
 1210 0084 05       		.uleb128 0x5
 1211 0085 49       		.uleb128 0x49
 1212 0086 13       		.uleb128 0x13
 1213 0087 02       		.uleb128 0x2
 1214 0088 18       		.uleb128 0x18
 1215 0089 00       		.byte	0
 1216 008a 00       		.byte	0
 1217 008b 0A       		.uleb128 0xa
 1218 008c 2E       		.uleb128 0x2e
 1219 008d 00       		.byte	0
 1220 008e 3F       		.uleb128 0x3f
 1221 008f 19       		.uleb128 0x19
 1222 0090 03       		.uleb128 0x3
 1223 0091 0E       		.uleb128 0xe
 1224 0092 3A       		.uleb128 0x3a
 1225 0093 0B       		.uleb128 0xb
 1226 0094 3B       		.uleb128 0x3b
 1227 0095 05       		.uleb128 0x5
 1228 0096 27       		.uleb128 0x27
 1229 0097 19       		.uleb128 0x19
 1230 0098 49       		.uleb128 0x49
 1231 0099 13       		.uleb128 0x13
 1232 009a 11       		.uleb128 0x11
 1233 009b 01       		.uleb128 0x1
 1234 009c 12       		.uleb128 0x12
 1235 009d 06       		.uleb128 0x6
 1236 009e 40       		.uleb128 0x40
 1237 009f 18       		.uleb128 0x18
 1238 00a0 9742     		.uleb128 0x2117
 1239 00a2 19       		.uleb128 0x19
 1240 00a3 00       		.byte	0
 1241 00a4 00       		.byte	0
 1242 00a5 0B       		.uleb128 0xb
 1243 00a6 2E       		.uleb128 0x2e
 1244 00a7 01       		.byte	0x1
 1245 00a8 3F       		.uleb128 0x3f
 1246 00a9 19       		.uleb128 0x19
 1247 00aa 03       		.uleb128 0x3
 1248 00ab 0E       		.uleb128 0xe
 1249 00ac 3A       		.uleb128 0x3a
 1250 00ad 0B       		.uleb128 0xb
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 39


 1251 00ae 3B       		.uleb128 0x3b
 1252 00af 05       		.uleb128 0x5
 1253 00b0 27       		.uleb128 0x27
 1254 00b1 19       		.uleb128 0x19
 1255 00b2 49       		.uleb128 0x49
 1256 00b3 13       		.uleb128 0x13
 1257 00b4 11       		.uleb128 0x11
 1258 00b5 01       		.uleb128 0x1
 1259 00b6 12       		.uleb128 0x12
 1260 00b7 06       		.uleb128 0x6
 1261 00b8 40       		.uleb128 0x40
 1262 00b9 18       		.uleb128 0x18
 1263 00ba 9742     		.uleb128 0x2117
 1264 00bc 19       		.uleb128 0x19
 1265 00bd 01       		.uleb128 0x1
 1266 00be 13       		.uleb128 0x13
 1267 00bf 00       		.byte	0
 1268 00c0 00       		.byte	0
 1269 00c1 0C       		.uleb128 0xc
 1270 00c2 34       		.uleb128 0x34
 1271 00c3 00       		.byte	0
 1272 00c4 03       		.uleb128 0x3
 1273 00c5 0E       		.uleb128 0xe
 1274 00c6 3A       		.uleb128 0x3a
 1275 00c7 0B       		.uleb128 0xb
 1276 00c8 3B       		.uleb128 0x3b
 1277 00c9 05       		.uleb128 0x5
 1278 00ca 49       		.uleb128 0x49
 1279 00cb 13       		.uleb128 0x13
 1280 00cc 02       		.uleb128 0x2
 1281 00cd 18       		.uleb128 0x18
 1282 00ce 00       		.byte	0
 1283 00cf 00       		.byte	0
 1284 00d0 0D       		.uleb128 0xd
 1285 00d1 898201   		.uleb128 0x4109
 1286 00d4 00       		.byte	0
 1287 00d5 11       		.uleb128 0x11
 1288 00d6 01       		.uleb128 0x1
 1289 00d7 31       		.uleb128 0x31
 1290 00d8 13       		.uleb128 0x13
 1291 00d9 00       		.byte	0
 1292 00da 00       		.byte	0
 1293 00db 0E       		.uleb128 0xe
 1294 00dc 2E       		.uleb128 0x2e
 1295 00dd 01       		.byte	0x1
 1296 00de 3F       		.uleb128 0x3f
 1297 00df 19       		.uleb128 0x19
 1298 00e0 03       		.uleb128 0x3
 1299 00e1 0E       		.uleb128 0xe
 1300 00e2 3A       		.uleb128 0x3a
 1301 00e3 0B       		.uleb128 0xb
 1302 00e4 3B       		.uleb128 0x3b
 1303 00e5 0B       		.uleb128 0xb
 1304 00e6 27       		.uleb128 0x27
 1305 00e7 19       		.uleb128 0x19
 1306 00e8 11       		.uleb128 0x11
 1307 00e9 01       		.uleb128 0x1
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 40


 1308 00ea 12       		.uleb128 0x12
 1309 00eb 06       		.uleb128 0x6
 1310 00ec 40       		.uleb128 0x40
 1311 00ed 18       		.uleb128 0x18
 1312 00ee 9742     		.uleb128 0x2117
 1313 00f0 19       		.uleb128 0x19
 1314 00f1 01       		.uleb128 0x1
 1315 00f2 13       		.uleb128 0x13
 1316 00f3 00       		.byte	0
 1317 00f4 00       		.byte	0
 1318 00f5 0F       		.uleb128 0xf
 1319 00f6 34       		.uleb128 0x34
 1320 00f7 00       		.byte	0
 1321 00f8 03       		.uleb128 0x3
 1322 00f9 0E       		.uleb128 0xe
 1323 00fa 3A       		.uleb128 0x3a
 1324 00fb 0B       		.uleb128 0xb
 1325 00fc 3B       		.uleb128 0x3b
 1326 00fd 0B       		.uleb128 0xb
 1327 00fe 49       		.uleb128 0x49
 1328 00ff 13       		.uleb128 0x13
 1329 0100 02       		.uleb128 0x2
 1330 0101 17       		.uleb128 0x17
 1331 0102 00       		.byte	0
 1332 0103 00       		.byte	0
 1333 0104 10       		.uleb128 0x10
 1334 0105 898201   		.uleb128 0x4109
 1335 0108 01       		.byte	0x1
 1336 0109 11       		.uleb128 0x11
 1337 010a 01       		.uleb128 0x1
 1338 010b 31       		.uleb128 0x31
 1339 010c 13       		.uleb128 0x13
 1340 010d 01       		.uleb128 0x1
 1341 010e 13       		.uleb128 0x13
 1342 010f 00       		.byte	0
 1343 0110 00       		.byte	0
 1344 0111 11       		.uleb128 0x11
 1345 0112 8A8201   		.uleb128 0x410a
 1346 0115 00       		.byte	0
 1347 0116 02       		.uleb128 0x2
 1348 0117 18       		.uleb128 0x18
 1349 0118 9142     		.uleb128 0x2111
 1350 011a 18       		.uleb128 0x18
 1351 011b 00       		.byte	0
 1352 011c 00       		.byte	0
 1353 011d 12       		.uleb128 0x12
 1354 011e 34       		.uleb128 0x34
 1355 011f 00       		.byte	0
 1356 0120 03       		.uleb128 0x3
 1357 0121 0E       		.uleb128 0xe
 1358 0122 3A       		.uleb128 0x3a
 1359 0123 0B       		.uleb128 0xb
 1360 0124 3B       		.uleb128 0x3b
 1361 0125 0B       		.uleb128 0xb
 1362 0126 49       		.uleb128 0x49
 1363 0127 13       		.uleb128 0x13
 1364 0128 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 41


 1365 0129 19       		.uleb128 0x19
 1366 012a 02       		.uleb128 0x2
 1367 012b 18       		.uleb128 0x18
 1368 012c 00       		.byte	0
 1369 012d 00       		.byte	0
 1370 012e 13       		.uleb128 0x13
 1371 012f 2E       		.uleb128 0x2e
 1372 0130 00       		.byte	0
 1373 0131 3F       		.uleb128 0x3f
 1374 0132 19       		.uleb128 0x19
 1375 0133 03       		.uleb128 0x3
 1376 0134 0E       		.uleb128 0xe
 1377 0135 3A       		.uleb128 0x3a
 1378 0136 0B       		.uleb128 0xb
 1379 0137 3B       		.uleb128 0x3b
 1380 0138 0B       		.uleb128 0xb
 1381 0139 27       		.uleb128 0x27
 1382 013a 19       		.uleb128 0x19
 1383 013b 49       		.uleb128 0x49
 1384 013c 13       		.uleb128 0x13
 1385 013d 3C       		.uleb128 0x3c
 1386 013e 19       		.uleb128 0x19
 1387 013f 00       		.byte	0
 1388 0140 00       		.byte	0
 1389 0141 14       		.uleb128 0x14
 1390 0142 2E       		.uleb128 0x2e
 1391 0143 01       		.byte	0x1
 1392 0144 3F       		.uleb128 0x3f
 1393 0145 19       		.uleb128 0x19
 1394 0146 03       		.uleb128 0x3
 1395 0147 0E       		.uleb128 0xe
 1396 0148 3A       		.uleb128 0x3a
 1397 0149 0B       		.uleb128 0xb
 1398 014a 3B       		.uleb128 0x3b
 1399 014b 0B       		.uleb128 0xb
 1400 014c 27       		.uleb128 0x27
 1401 014d 19       		.uleb128 0x19
 1402 014e 3C       		.uleb128 0x3c
 1403 014f 19       		.uleb128 0x19
 1404 0150 00       		.byte	0
 1405 0151 00       		.byte	0
 1406 0152 15       		.uleb128 0x15
 1407 0153 05       		.uleb128 0x5
 1408 0154 00       		.byte	0
 1409 0155 49       		.uleb128 0x49
 1410 0156 13       		.uleb128 0x13
 1411 0157 00       		.byte	0
 1412 0158 00       		.byte	0
 1413 0159 00       		.byte	0
 1414              		.section	.debug_loc,"",%progbits
 1415              	.Ldebug_loc0:
 1416              	.LLST0:
 1417 0000 0A000000 		.4byte	.LVL10
 1418 0004 0E000000 		.4byte	.LVL11
 1419 0008 0100     		.2byte	0x1
 1420 000a 53       		.byte	0x53
 1421 000b 00000000 		.4byte	0
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 42


 1422 000f 00000000 		.4byte	0
 1423              	.LLST1:
 1424 0013 52000000 		.4byte	.LVL18
 1425 0017 5F000000 		.4byte	.LVL19-1
 1426 001b 0100     		.2byte	0x1
 1427 001d 50       		.byte	0x50
 1428 001e 00000000 		.4byte	0
 1429 0022 00000000 		.4byte	0
 1430              		.section	.debug_aranges,"",%progbits
 1431 0000 B4000000 		.4byte	0xb4
 1432 0004 0200     		.2byte	0x2
 1433 0006 00000000 		.4byte	.Ldebug_info0
 1434 000a 04       		.byte	0x4
 1435 000b 00       		.byte	0
 1436 000c 0000     		.2byte	0
 1437 000e 0000     		.2byte	0
 1438 0010 00000000 		.4byte	.LFB2
 1439 0014 10000000 		.4byte	.LFE2-.LFB2
 1440 0018 00000000 		.4byte	.LFB3
 1441 001c 10000000 		.4byte	.LFE3-.LFB3
 1442 0020 00000000 		.4byte	.LFB4
 1443 0024 0C000000 		.4byte	.LFE4-.LFB4
 1444 0028 00000000 		.4byte	.LFB5
 1445 002c 14000000 		.4byte	.LFE5-.LFB5
 1446 0030 00000000 		.4byte	.LFB7
 1447 0034 0C000000 		.4byte	.LFE7-.LFB7
 1448 0038 00000000 		.4byte	.LFB8
 1449 003c 0C000000 		.4byte	.LFE8-.LFB8
 1450 0040 00000000 		.4byte	.LFB9
 1451 0044 0C000000 		.4byte	.LFE9-.LFB9
 1452 0048 00000000 		.4byte	.LFB10
 1453 004c 0C000000 		.4byte	.LFE10-.LFB10
 1454 0050 00000000 		.4byte	.LFB11
 1455 0054 0C000000 		.4byte	.LFE11-.LFB11
 1456 0058 00000000 		.4byte	.LFB12
 1457 005c 0C000000 		.4byte	.LFE12-.LFB12
 1458 0060 00000000 		.4byte	.LFB13
 1459 0064 0C000000 		.4byte	.LFE13-.LFB13
 1460 0068 00000000 		.4byte	.LFB14
 1461 006c 0C000000 		.4byte	.LFE14-.LFB14
 1462 0070 00000000 		.4byte	.LFB15
 1463 0074 0C000000 		.4byte	.LFE15-.LFB15
 1464 0078 00000000 		.4byte	.LFB16
 1465 007c 0C000000 		.4byte	.LFE16-.LFB16
 1466 0080 00000000 		.4byte	.LFB6
 1467 0084 14000000 		.4byte	.LFE6-.LFB6
 1468 0088 00000000 		.4byte	.LFB1
 1469 008c 70000000 		.4byte	.LFE1-.LFB1
 1470 0090 00000000 		.4byte	.LFB0
 1471 0094 1C000000 		.4byte	.LFE0-.LFB0
 1472 0098 00000000 		.4byte	.LFB17
 1473 009c 0C000000 		.4byte	.LFE17-.LFB17
 1474 00a0 00000000 		.4byte	.LFB18
 1475 00a4 0C000000 		.4byte	.LFE18-.LFB18
 1476 00a8 00000000 		.4byte	.LFB19
 1477 00ac 0C000000 		.4byte	.LFE19-.LFB19
 1478 00b0 00000000 		.4byte	0
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 43


 1479 00b4 00000000 		.4byte	0
 1480              		.section	.debug_ranges,"",%progbits
 1481              	.Ldebug_ranges0:
 1482 0000 00000000 		.4byte	.LFB2
 1483 0004 10000000 		.4byte	.LFE2
 1484 0008 00000000 		.4byte	.LFB3
 1485 000c 10000000 		.4byte	.LFE3
 1486 0010 00000000 		.4byte	.LFB4
 1487 0014 0C000000 		.4byte	.LFE4
 1488 0018 00000000 		.4byte	.LFB5
 1489 001c 14000000 		.4byte	.LFE5
 1490 0020 00000000 		.4byte	.LFB7
 1491 0024 0C000000 		.4byte	.LFE7
 1492 0028 00000000 		.4byte	.LFB8
 1493 002c 0C000000 		.4byte	.LFE8
 1494 0030 00000000 		.4byte	.LFB9
 1495 0034 0C000000 		.4byte	.LFE9
 1496 0038 00000000 		.4byte	.LFB10
 1497 003c 0C000000 		.4byte	.LFE10
 1498 0040 00000000 		.4byte	.LFB11
 1499 0044 0C000000 		.4byte	.LFE11
 1500 0048 00000000 		.4byte	.LFB12
 1501 004c 0C000000 		.4byte	.LFE12
 1502 0050 00000000 		.4byte	.LFB13
 1503 0054 0C000000 		.4byte	.LFE13
 1504 0058 00000000 		.4byte	.LFB14
 1505 005c 0C000000 		.4byte	.LFE14
 1506 0060 00000000 		.4byte	.LFB15
 1507 0064 0C000000 		.4byte	.LFE15
 1508 0068 00000000 		.4byte	.LFB16
 1509 006c 0C000000 		.4byte	.LFE16
 1510 0070 00000000 		.4byte	.LFB6
 1511 0074 14000000 		.4byte	.LFE6
 1512 0078 00000000 		.4byte	.LFB1
 1513 007c 70000000 		.4byte	.LFE1
 1514 0080 00000000 		.4byte	.LFB0
 1515 0084 1C000000 		.4byte	.LFE0
 1516 0088 00000000 		.4byte	.LFB17
 1517 008c 0C000000 		.4byte	.LFE17
 1518 0090 00000000 		.4byte	.LFB18
 1519 0094 0C000000 		.4byte	.LFE18
 1520 0098 00000000 		.4byte	.LFB19
 1521 009c 0C000000 		.4byte	.LFE19
 1522 00a0 00000000 		.4byte	0
 1523 00a4 00000000 		.4byte	0
 1524              		.section	.debug_line,"",%progbits
 1525              	.Ldebug_line0:
 1526 0000 CE010000 		.section	.debug_str,"MS",%progbits,1
 1526      02004F00 
 1526      00000201 
 1526      FB0E0D00 
 1526      01010101 
 1527              	.LASF15:
 1528 0000 72656731 		.ascii	"reg16\000"
 1528      3600
 1529              	.LASF17:
 1530 0006 50574D5F 		.ascii	"PWM_1_Enable\000"
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 44


 1530      315F456E 
 1530      61626C65 
 1530      00
 1531              	.LASF47:
 1532 0013 433A5C46 		.ascii	"C:\\FlexSEA_alx87grd\\execute\\execute_1_0.cydsn\000"
 1532      6C657853 
 1532      45415F61 
 1532      6C783837 
 1532      6772645C 
 1533              	.LASF33:
 1534 0041 50574D5F 		.ascii	"PWM_1_WriteControlRegister\000"
 1534      315F5772 
 1534      69746543 
 1534      6F6E7472 
 1534      6F6C5265 
 1535              	.LASF19:
 1536 005c 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 1536      315F5772 
 1536      69746543 
 1536      6F756E74 
 1536      657200
 1537              	.LASF36:
 1538 006f 50574D5F 		.ascii	"PWM_1_ClearFIFO\000"
 1538      315F436C 
 1538      65617246 
 1538      49464F00 
 1539              	.LASF11:
 1540 007f 666C6F61 		.ascii	"float\000"
 1540      7400
 1541              	.LASF22:
 1542 0085 70657269 		.ascii	"period\000"
 1542      6F6400
 1543              	.LASF42:
 1544 008c 50574D5F 		.ascii	"PWM_1_ReadCompare1\000"
 1544      315F5265 
 1544      6164436F 
 1544      6D706172 
 1544      653100
 1545              	.LASF43:
 1546 009f 50574D5F 		.ascii	"PWM_1_ReadCompare2\000"
 1546      315F5265 
 1546      6164436F 
 1546      6D706172 
 1546      653200
 1547              	.LASF3:
 1548 00b2 73686F72 		.ascii	"short unsigned int\000"
 1548      7420756E 
 1548      7369676E 
 1548      65642069 
 1548      6E7400
 1549              	.LASF46:
 1550 00c5 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM_1.c\000"
 1550      6E657261 
 1550      7465645F 
 1550      536F7572 
 1550      63655C50 
 1551              	.LASF23:
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 45


 1552 00e6 50574D5F 		.ascii	"PWM_1_WriteCompare1\000"
 1552      315F5772 
 1552      69746543 
 1552      6F6D7061 
 1552      72653100 
 1553              	.LASF25:
 1554 00fa 50574D5F 		.ascii	"PWM_1_WriteCompare2\000"
 1554      315F5772 
 1554      69746543 
 1554      6F6D7061 
 1554      72653200 
 1555              	.LASF26:
 1556 010e 50574D5F 		.ascii	"PWM_1_WriteDeadTime\000"
 1556      315F5772 
 1556      69746544 
 1556      65616454 
 1556      696D6500 
 1557              	.LASF21:
 1558 0122 636F756E 		.ascii	"counter\000"
 1558      74657200 
 1559              	.LASF7:
 1560 012a 6C6F6E67 		.ascii	"long long unsigned int\000"
 1560      206C6F6E 
 1560      6720756E 
 1560      7369676E 
 1560      65642069 
 1561              	.LASF1:
 1562 0141 756E7369 		.ascii	"unsigned char\000"
 1562      676E6564 
 1562      20636861 
 1562      7200
 1563              	.LASF14:
 1564 014f 72656738 		.ascii	"reg8\000"
 1564      00
 1565              	.LASF44:
 1566 0154 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 1566      315F5265 
 1566      61645065 
 1566      72696F64 
 1566      00
 1567              	.LASF5:
 1568 0165 6C6F6E67 		.ascii	"long unsigned int\000"
 1568      20756E73 
 1568      69676E65 
 1568      6420696E 
 1568      7400
 1569              	.LASF9:
 1570 0177 75696E74 		.ascii	"uint8\000"
 1570      3800
 1571              	.LASF34:
 1572 017d 636F6E74 		.ascii	"control\000"
 1572      726F6C00 
 1573              	.LASF30:
 1574 0185 50574D5F 		.ascii	"PWM_1_SetInterruptMode\000"
 1574      315F5365 
 1574      74496E74 
 1574      65727275 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 46


 1574      70744D6F 
 1575              	.LASF32:
 1576 019c 50574D5F 		.ascii	"PWM_1_ReadStatusRegister\000"
 1576      315F5265 
 1576      61645374 
 1576      61747573 
 1576      52656769 
 1577              	.LASF12:
 1578 01b5 646F7562 		.ascii	"double\000"
 1578      6C6500
 1579              	.LASF40:
 1580 01bc 50574D5F 		.ascii	"PWM_1_interruptState\000"
 1580      315F696E 
 1580      74657272 
 1580      75707453 
 1580      74617465 
 1581              	.LASF49:
 1582 01d1 50574D5F 		.ascii	"PWM_1_initVar\000"
 1582      315F696E 
 1582      69745661 
 1582      7200
 1583              	.LASF2:
 1584 01df 73686F72 		.ascii	"short int\000"
 1584      7420696E 
 1584      7400
 1585              	.LASF35:
 1586 01e9 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 1586      315F5265 
 1586      61644361 
 1586      70747572 
 1586      6500
 1587              	.LASF10:
 1588 01fb 75696E74 		.ascii	"uint16\000"
 1588      313600
 1589              	.LASF37:
 1590 0202 50574D5F 		.ascii	"PWM_1_Init\000"
 1590      315F496E 
 1590      697400
 1591              	.LASF45:
 1592 020d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1592      4320342E 
 1592      392E3320 
 1592      32303135 
 1592      30333033 
 1593 0240 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1593      20726576 
 1593      6973696F 
 1593      6E203232 
 1593      31323230 
 1594 0273 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1594      66756E63 
 1594      74696F6E 
 1594      2D736563 
 1594      74696F6E 
 1595              	.LASF50:
 1596 029b 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1596      74657243 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 47


 1596      72697469 
 1596      63616C53 
 1596      65637469 
 1597              	.LASF8:
 1598 02b2 756E7369 		.ascii	"unsigned int\000"
 1598      676E6564 
 1598      20696E74 
 1598      00
 1599              	.LASF51:
 1600 02bf 43794578 		.ascii	"CyExitCriticalSection\000"
 1600      69744372 
 1600      69746963 
 1600      616C5365 
 1600      6374696F 
 1601              	.LASF38:
 1602 02d5 72657375 		.ascii	"result\000"
 1602      6C7400
 1603              	.LASF39:
 1604 02dc 6374726C 		.ascii	"ctrl\000"
 1604      00
 1605              	.LASF16:
 1606 02e1 73697A65 		.ascii	"sizetype\000"
 1606      74797065 
 1606      00
 1607              	.LASF6:
 1608 02ea 6C6F6E67 		.ascii	"long long int\000"
 1608      206C6F6E 
 1608      6720696E 
 1608      7400
 1609              	.LASF48:
 1610 02f8 50574D5F 		.ascii	"PWM_1_ReadControlRegister\000"
 1610      315F5265 
 1610      6164436F 
 1610      6E74726F 
 1610      6C526567 
 1611              	.LASF31:
 1612 0312 696E7465 		.ascii	"interruptMode\000"
 1612      72727570 
 1612      744D6F64 
 1612      6500
 1613              	.LASF20:
 1614 0320 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 1614      315F5772 
 1614      69746550 
 1614      6572696F 
 1614      6400
 1615              	.LASF28:
 1616 0332 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 1616      315F5265 
 1616      6164436F 
 1616      756E7465 
 1616      7200
 1617              	.LASF29:
 1618 0344 50574D5F 		.ascii	"PWM_1_ReadDeadTime\000"
 1618      315F5265 
 1618      61644465 
 1618      61645469 
ARM GAS  C:\Users\Alex\AppData\Local\Temp\ccjGMiZa.s 			page 48


 1618      6D6500
 1619              	.LASF18:
 1620 0357 50574D5F 		.ascii	"PWM_1_Stop\000"
 1620      315F5374 
 1620      6F7000
 1621              	.LASF4:
 1622 0362 6C6F6E67 		.ascii	"long int\000"
 1622      20696E74 
 1622      00
 1623              	.LASF13:
 1624 036b 63686172 		.ascii	"char\000"
 1624      00
 1625              	.LASF0:
 1626 0370 7369676E 		.ascii	"signed char\000"
 1626      65642063 
 1626      68617200 
 1627              	.LASF24:
 1628 037c 636F6D70 		.ascii	"compare\000"
 1628      61726500 
 1629              	.LASF27:
 1630 0384 64656164 		.ascii	"deadtime\000"
 1630      74696D65 
 1630      00
 1631              	.LASF41:
 1632 038d 50574D5F 		.ascii	"PWM_1_Start\000"
 1632      315F5374 
 1632      61727400 
 1633              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
